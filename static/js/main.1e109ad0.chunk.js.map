{"version":3,"sources":["core/firebase.ts","fe/ViewDebug.tsx","core/types.ts","core/role.ts","fe/shared.tsx","core/utils.ts","fe/ViewMission.tsx","core/storage.ts","fe/ViewLobby.tsx","fe/ViewReset.tsx","fe/ViewGame.tsx","fe/ViewSetup.tsx","fe/ViewBar.tsx","fe/ViewNominate.tsx","fe/ViewLady.tsx","fe/ViewHub.tsx","fe/ErrorBoundary.tsx","index.tsx"],"names":["dotenv","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","FIREBASE","db","isOnline","firebase","initializeApp","this","database","console","log","Promise","resolve","reject","ref","once","resp","data","val","Object","values","game","playerId","gid","nominations","players","turn","mission","roster","filter","pid","tally","order","current","updateNominations","updatePlayers","updateTurn","updateMission","set","sawId","includeLady","gameId","showResults","dealerLocked","callback","on","off","ViewDebug","state","games","promise","makeTrashable","getAllGames","then","setState","trash","href","map","key","p","pi","onClick","kickPlayer","name","deleteAllGames","React","Component","ViewTabType","MissionVoteType","NominationType","MissionResultType","Blue","Red","Neutral","MissionResults","Roles","RoleType","reduce","obj","r","reds","BasicRed","Assassin","Morgana","Mordred","Oberon","redsMinusMordred","redsMinusOberon","AllRoles","BasicBlue","isRed","description","sees","Merlin","Percival","Green","styled","span","StyledBox","div","HostBox","Flex","Board","MissionIcon","props","result","isDev","window","location","includes","isDebug","orig","toUpperCase","shuffle","temporaryValue","randomIndex","array","concat","currentIndex","length","Math","floor","random","getCurrentPlayers","getBoardFor","count","missions","required","neededFails","vetos","ViewMission","storage","me","role","updateMissionTally","newVotes","isHost","isNom","pendingTally","voteSuccess","voteFail","keys","sort","reverse","vote","i","toggleReveal","voteClear","STORAGE","store","localStorage","onSet","v","split","slice","join","hri","undefined","view","setItem","JSON","stringify","get","stored","getItem","parse","getMinor","reset","ViewLobby","tempName","tempJoin","setName","createGame","value","onChange","event","target","placeholder","joinGame","ViewReset","confirmed","confirm","tryReset","ViewGame","indexOf","nextIndex","newCurrent","clearNominations","clearMission","mIndex","board","currIndex","nextState","updateBoard","delta","vetoes","updateVetoes","anyDoubleFails","some","m","nextTurn","index","missionChange","clearMissionNoms","setMissionNoms","addVeto","DeleteLink","ErrorMessage","ViewSetup","newRoles","roles","push","updateRoles","findIndex","splice","errorMessage","shuffledPlayers","shuffledRoles","forEach","hasLady","sawLady","giveLadyTo","id","hidePlayers","roleName","Color","canEdit","removeRole","addRole","keyFunc","allPlayers","arr","a","b","ka","kb","isAssigned","currentPlayers","redRoles","blueRoles","o","reveal","clear","revealPlayers","renderAdd","setIncludeLady","assign","renderReveal","renderRoles","SecretBox","RoleBox","ViewBar","collapseSecrets","myData","youSee","playerIds","pdata","style","color","host","textDecoration","ViewNominate","updateNominationsTally","getIsDealer","alert","newRoster","isDealer","sortedPlayers","outOfRoster","sortedTally","currentMission","currentNeeded","removeFromRoster","addToRoster","lockTheNoms","ViewLady","sawPid","takeLadyFrom","ladySaw","myPlayer","examinedPlayer","examinedRole","ExaminedColor","currentPlayer","currentName","previousOwners","eligible","examine","HeaderLink","hasLink","ViewHub","Link","type","setView","children","genGuestGameData","e","Error","localData","updateGame","getGameData","hostData","myId","localMe","remoteMe","onReceive","setGame","pow","toString","padStart","genHostGameData","leaveGame","renderMain","ErrorBoundary","hasError","error","info","reload","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e109ad0.chunk.js","sourcesContent":["import dotenv from 'dotenv';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport { BoardData, GameData, MissionData, MissionVote, Nomination, NominationData, PlayersById, Role, TurnData } from './types';\n\ndotenv.config();\nconst config = {\n  apiKey: process.env.REACT_APP_apiKey,\n  authDomain: process.env.REACT_APP_authDomain,\n  databaseURL: process.env.REACT_APP_databaseURL,\n  projectId: process.env.REACT_APP_projectId,\n  storageBucket: process.env.REACT_APP_storageBucket,\n  messagingSenderId: process.env.REACT_APP_messagingSenderId,\n  appId: process.env.REACT_APP_appId,\n  measurementId: process.env.REACT_APP_measurementId,\n};\n\nclass FirebaseSingleton {\n  private db: firebase.database.Database;\n  isOnline = true;\n\n  constructor() {\n    firebase.initializeApp(config);\n    this.db = firebase.database();\n  }\n\n  // debug\n  async getAllGames() {\n    console.log('fetching all game data');\n    return new Promise<GameData[]>((resolve, reject) => {\n      this.db.ref(`game`).once('value', resp => {\n        const data = resp.val();\n        console.log('got all games:', data)\n        resolve(Object.values(data || {}) as GameData[]);\n      });\n    });\n  }\n  async kickPlayer(game: GameData, playerId: string) {\n    const { gid, nominations, players, turn, mission } = game;\n    nominations.roster = (nominations.roster || []).filter(pid => pid !== playerId);\n    delete (nominations.tally || {})[playerId];\n    delete (players || {})[playerId];\n    if (turn) {\n      turn.order = turn.order.filter(pid => pid !== playerId);\n      if (turn.current === playerId) {\n        turn.current = turn.order[0];\n      }\n    }\n    delete (mission.tally || {})[playerId];\n    await this.updateNominations(gid, nominations);\n    await this.updatePlayers(gid, players);\n    await this.updateTurn(gid, turn);\n    await this.updateMission(gid, mission);\n  }\n  deleteAllGames() {\n    return this.db.ref(`game`).set({});\n  }\n\n  hidePlayers(gid: string) {\n    return this.db.ref(`game/${gid}/reveal`).set(false);\n  }\n  revealPlayers(gid: string) {\n    return this.db.ref(`game/${gid}/reveal`).set(true);\n  }\n\n  giveLadyTo(gid: string, pid: string) {\n    return this.db.ref(`game/${gid}/players/${pid}/hasLady`).set(true);\n  }\n  takeLadyFrom(gid: string, pid: string) {\n    return this.db.ref(`game/${gid}/players/${pid}/hasLady`).set(false);\n  }\n  ladySaw(gid: string, pid: string, sawId: string) {\n    return this.db.ref(`game/${gid}/players/${pid}/sawLady`).set(sawId);\n  }\n  setIncludeLady(gid: string, includeLady: boolean) {\n    return this.db.ref(`game/${gid}/includeLady`).set(includeLady);\n  }\n\n  clearMission(gameId: string) {\n    return this.updateMission(gameId, {\n      showResults: false,\n      tally: {},\n    });\n  }\n  clearNominations(gameId: string) {\n    return this.updateNominations(gameId, {\n      roster: [],\n      dealerLocked: false,\n      showResults: false,\n      tally: {},\n    });\n  }\n\n  updateGame(data: GameData) {\n    console.log('saving data:', data);\n    return this.db.ref(`game/${data.gid}`).set(data);\n  }\n  updateBoard(gameId: string, data: BoardData) {\n    return this.db.ref(`game/${gameId}/board`).set(data);\n  }\n  updateMission(gameId: string, data: MissionData) {\n    return this.db.ref(`game/${gameId}/mission`).set(data);\n  }\n  updateMissionTally(gameId: string, pid: string, data: MissionVote) {\n    return this.db.ref(`game/${gameId}/mission/tally/${pid}`).set(data);\n  }\n  updateNominations(gameId: string, data: NominationData) {\n    return this.db.ref(`game/${gameId}/nominations`).set(data);\n  }\n  updateNominationsTally(gameId: string, pid: string, data: Nomination) {\n    return this.db.ref(`game/${gameId}/nominations/tally/${pid}`).set(data);\n  }\n  updatePlayers(gameId: string, data: PlayersById) {\n    return this.db.ref(`game/${gameId}/players`).set(data);\n  }\n  updateRoles(gameId: string, data: Role[]) {\n    return this.db.ref(`game/${gameId}/roles`).set(data);\n  }\n  updateTurn(gameId: string, data: TurnData | null) {\n    return this.db.ref(`game/${gameId}/turn`).set(data || null);\n  }\n  updateVetoes(gameId: string, data: number) {\n    return this.db.ref(`game/${gameId}/vetoes`).set(data);\n  }\n\n  async getGameData(gameId: string) {\n    console.log('fetching game data');\n    return new Promise<GameData>((resolve, reject) => {\n      this.db.ref(`game/${gameId}`).once('value', resp => {\n        const data = resp.val();\n        console.log('got game data:', data)\n        resolve(data as GameData);\n      });\n    });\n  }\n\n  joinGame(gameId: string, callback: (val: any) => void) {\n    console.log('enabling hook:', gameId);\n    return this.db.ref(`game/${gameId}`).on('value', data => {\n      callback(data.val());\n    });\n  }\n  leaveGame(gameId: string) {\n    console.log('disabling hook:', gameId);\n    return this.db.ref(`game/${gameId}`).off('value');\n  }\n}\n\nexport const FIREBASE = new FirebaseSingleton();\n","import React from 'react';\nimport makeTrashable, { TrashablePromise } from 'trashable';\nimport { GameData } from '../core/types';\nimport { FIREBASE } from '../core/firebase';\n\ninterface Props { }\ninterface State {\n  games: GameData[];\n}\n\nexport class ViewDebug extends React.Component<Props, State> {\n  state: State = {\n    games: [],\n  };\n  promise?: TrashablePromise<GameData[]>;\n\n  componentDidMount() {\n    this.promise = makeTrashable(FIREBASE.getAllGames());\n    this.promise.then(games => this.setState({ games, }));\n  }\n  componentWillUnmount() {\n    if (this.promise) {\n      this.promise.trash();\n    }\n  }\n  render() {\n    const { games } = this.state;\n    return (\n      <div>\n        <h1>Debugging Health Info</h1>\n        <p>\n          <a href=\"https://mpaulweeks.github.io/avalon/\">mpaulweeks.github.io/avalon</a>\n        </p>\n        <h3>games</h3>\n        {games.map(game => (\n          <div key={game.gid}>\n            {game.gid}\n            {Object.values(game.players).map((p, pi) => (\n              <span key={pi + '-' + p.pid} onClick={() => FIREBASE.kickPlayer(game, p.pid)}>\n                &nbsp;/ {p.name}\n              </span>\n            ))}\n          </div>\n        ))}\n        <br />\n        <button onClick={() => FIREBASE.deleteAllGames()}> delete all </button>\n      </div>\n    );\n  }\n}\n","// enums\n\nexport type ViewTab = 'loading' | 'lobby' | 'game' | 'nominate' | 'mission' | 'lady' | 'setup' | 'reset' | 'debug';\nexport const ViewTabType = {\n  Loading: 'loading' as ViewTab,\n  Lobby: 'lobby' as ViewTab,\n  Game: 'game' as ViewTab,\n  Nominate: 'nominate' as ViewTab,\n  Mission: 'mission' as ViewTab,\n  Lady: 'lady' as ViewTab,\n  Setup: 'setup' as ViewTab,\n  Reset: 'reset' as ViewTab,\n  Debug: 'debug' as ViewTab,\n};\n\nexport type MissionVote = 'success' | 'fail';\nexport const MissionVoteType = {\n  Success: 'success' as MissionVote,\n  Fail: 'fail' as MissionVote,\n};\n\nexport type Nomination = 'approve' | 'reject';\nexport const NominationType = {\n  Approve: 'approve' as Nomination,\n  Reject: 'reject' as Nomination,\n};\n\nexport type MissionResult = 'blue' | 'red' | 'neutral';\nexport const MissionResultType = {\n  Blue: 'blue victory' as MissionResult,\n  Red: 'red victory' as MissionResult,\n  Neutral: 'neutral' as MissionResult,\n};\nexport const MissionResults = Object.values(MissionResultType);\n\nexport const Roles = [\n  'BasicBlue',\n  'Merlin',\n  'Percival',\n  'BasicRed',\n  'Assassin',\n  'Mordred',\n  'Morgana',\n  'Oberon',\n] as const;\nexport type Role = typeof Roles[number];\nexport const RoleType = Roles.reduce((obj, r) => {\n  obj[r] = r;\n  return obj;\n}, {} as { [key in typeof Roles[number]]: Role });\n\n// interfaces\n\nexport interface MissionBlueprint {\n  result: MissionResult;\n  required: number;\n  neededFails: number;\n  roster?: string[] | null;\n}\n\nexport interface BoardData {\n  missions: MissionBlueprint[];\n  vetos: number;\n}\n\nexport interface PlayerData {\n  pid: string;\n  name: string;\n  role?: Role | null;\n  hasLady: boolean;\n  sawLady: string | null;\n}\n\nexport interface PlayersById {\n  [key: string]: PlayerData;\n};\n\nexport interface TurnData {\n  current: string;\n  order: string[];\n};\n\nexport interface NominationData {\n  showResults: boolean;\n  roster: string[];\n  dealerLocked: boolean;\n  tally: {\n    [key: string]: Nomination;\n  };\n};\n\nexport interface MissionData {\n  showResults: boolean;\n  tally: {\n    [key: string]: MissionVote;\n  };\n};\n\nexport interface GameData {\n  gid: string;\n  host?: string;\n  board: BoardData;\n  mission: MissionData;\n  nominations: NominationData;\n  players: PlayersById;\n  roles: Role[];\n  turn: TurnData | null;\n  vetoes: number;\n  includeLady: boolean;\n  reveal: boolean;\n}\n\nexport interface UserState {\n  v: string;\n  pid: string;\n  name?: string;\n  gid?: string;\n  view: ViewTab;\n}\n","import { Role, Roles, RoleType } from './types';\n\nexport interface RoleData {\n  isRed: boolean;\n  name: string;\n  description: string;\n  sees: Role[];\n};\n\nconst reds = [RoleType.BasicRed, RoleType.Assassin, RoleType.Morgana, RoleType.Mordred, RoleType.Oberon];\nconst redsMinusMordred = reds.filter(r => r !== RoleType.Mordred);\nconst redsMinusOberon = reds.filter(r => r !== RoleType.Oberon);\n\nexport const AllRoles: { [key in typeof Roles[number]]: RoleData } = {\n  BasicBlue: {\n    isRed: false,\n    name: 'Basic Blue',\n    description: 'You know nothing. Good luck!',\n    sees: [],\n  },\n  Merlin: {\n    isRed: false,\n    name: 'Merlin',\n    description: 'You see the Red players. Help the Blue team without revealing yourself.',\n    sees: redsMinusMordred,\n  },\n  Percival: {\n    isRed: false,\n    name: 'Percival',\n    description: 'You see two players. One is your ally Merlin, the other is the enemy Morgana. You must figure out which is which.',\n    sees: [RoleType.Merlin, RoleType.Morgana],\n  },\n  BasicRed: {\n    isRed: true,\n    name: 'Basic Red',\n    description: 'You see your fellow Red players.',\n    sees: redsMinusOberon,\n  },\n  Assassin: {\n    isRed: true,\n    name: 'Assassin',\n    description: 'You see your fellow Red players. If you can guess Merlin at the end of the game, you win.',\n    sees: redsMinusOberon,\n  },\n  Mordred: {\n    isRed: true,\n    name: 'Mordred',\n    description: 'You see your fellow Red players. Merlin cannot see you',\n    sees: redsMinusOberon,\n  },\n  Morgana: {\n    isRed: true,\n    name: 'Morgana',\n    description: 'You see your fellow Red players. Percival sees you and Merlin. Try to confuse them.',\n    sees: redsMinusOberon,\n  },\n  Oberon: {\n    isRed: true,\n    name: 'Oberon',\n    description: 'You cannot see your fellow Red players and they cannot see you.',\n    sees: [],\n  },\n};\n","import styled from 'styled-components';\nimport { MissionResult, MissionResultType } from '../core/types';\n\nexport const Green = styled.span`\n  color: green;\n  font-weight: bold;\n`;\nexport const Blue = styled.span`\n  color: blue;\n  font-weight: bold;\n`;\nexport const Red = styled.span`\n  color: red;\n  font-weight: bold;\n`;\n\nexport const StyledBox = styled.div`\n  margin: 1rem 0;\n  padding: 0.8rem;\n  border: 0.2rem solid green;\n`;\n\nexport const HostBox = styled(StyledBox)`\n  border-color: purple;\n  background-color: plum;\n`;\n\nexport const Flex = styled.div`\n  display: flex;\n  flex-direction: horizontal;\n  text-align: center;\n  flex-wrap: nowrap;\n`;\n\nexport const Board = styled(Flex)``;\n\nexport const MissionIcon = styled.div<{ result: MissionResult }>`\n  font-size: 4rem;\n  margin: 0.2em;\n  width: 1.5em;\n  height: 1.5em;\n  border: 1px solid black;\n  border-radius: 2em;\n  cursor: pointer;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  user-select: none;\n\n  ${props => `\n    ${props.result === MissionResultType.Neutral ? `\n      color: black;\n      background-color: white;\n    `: ''}\n    ${props.result === MissionResultType.Blue ? `\n      color: white;\n      background-color: blue;\n    `: ''}\n    ${props.result === MissionResultType.Red ? `\n      color: white;\n      background-color: red;\n    `: ''}\n  `}\n`;\n","import { GameData, MissionResultType } from \"./types\";\n\nexport const APP_VERSION = '1.3.2';\n\nexport const isDev = window.location.href.includes('localhost');\nexport const isDebug = window.location.href.includes('?d');\nif (!isDebug) {\n  const orig = console.log;\n  console.log = (...args: any[]) => { };\n  orig('activate debug move to view logs'.toUpperCase());\n}\n\nexport function randomId(length: number) {\n  return Math.floor(Math.random() * Math.pow(10, length)).toString().padStart(length, '0');\n}\n\nexport function sort<T, E>(arr: T[], keyFunc: (key: T) => E) {\n  return arr.concat().sort((a, b) => {\n    const ka = keyFunc(a);\n    const kb = keyFunc(b);\n    if (ka < kb) { return -1; }\n    if (ka > kb) { return 1; }\n    return 0;\n  });\n}\n\nexport function sortObjVals<T, E>(obj: { [key: string]: T }, keyFunc: (key: T) => E) {\n  return sort(Object.values(obj), keyFunc);\n}\n\n/**\n * Randomly shuffle an array\n * https://stackoverflow.com/a/2450976/1293256\n * @param  {Array} array The array to shuffle\n * @return {String}      The first item in the shuffled array\n */\nexport function shuffle<T>(orig: T[]): T[] {\n  const array = orig.concat();\n  var currentIndex = array.length;\n  var temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n};\n\nexport function getCurrentPlayers(game: GameData) {\n  return (game.turn ? game.turn.order : []).map(pid => game.players[pid]);\n}\n\nexport function getBoardFor(count: number) {\n  let missions = [ // === 5\n    { required: 2, neededFails: 1, result: MissionResultType.Neutral },\n    { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n    { required: 2, neededFails: 1, result: MissionResultType.Neutral },\n    { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n    { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n  ];\n  if (count === 6) {\n    missions = [\n      { required: 2, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 4, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 4, neededFails: 1, result: MissionResultType.Neutral },\n    ];\n  }\n  if (count === 7) {\n    missions = [\n      { required: 2, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 4, neededFails: 2, result: MissionResultType.Neutral },\n      { required: 4, neededFails: 1, result: MissionResultType.Neutral },\n    ];\n  }\n  if (count >= 8) {\n    missions = [\n      { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 4, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 4, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 5, neededFails: 2, result: MissionResultType.Neutral },\n      { required: 5, neededFails: 1, result: MissionResultType.Neutral },\n    ];\n  }\n  return {\n    vetos: 0,\n    missions: missions,\n  };\n}\n","import React from 'react';\nimport { MissionVoteType, GameData, UserState, RoleType } from '../core/types';\nimport { FIREBASE } from '../core/firebase';\nimport { AllRoles } from '../core/role';\nimport { HostBox, Green, Red } from './shared';\nimport { getCurrentPlayers } from '../core/utils';\n\ninterface Props {\n  isHost: boolean;\n  data: GameData;\n  storage: UserState;\n}\ninterface State { }\n\nexport class ViewMission extends React.Component<Props, State> {\n  pid = this.props.storage.pid;\n  state: State = {};\n\n  getMyRole() {\n    const { storage, data } = this.props;\n    const me = data.players[storage.pid] || {\n      name: storage.name,\n    };\n    return AllRoles[me.role || RoleType.BasicBlue];\n  }\n\n  async voteSuccess() {\n    await FIREBASE.updateMissionTally(this.props.data.gid, this.pid, MissionVoteType.Success);\n  }\n  async voteFail() {\n    await FIREBASE.updateMissionTally(this.props.data.gid, this.pid, MissionVoteType.Fail);\n  }\n  async voteClear() {\n    const newVotes = { ...this.props.data.mission, };\n    newVotes.tally = {};\n    newVotes.showResults = false;\n    await FIREBASE.updateMission(this.props.data.gid, newVotes);\n  }\n  async toggleReveal() {\n    const newVotes = { ...this.props.data.mission, };\n    newVotes.showResults = !newVotes.showResults;\n    await FIREBASE.updateMission(this.props.data.gid, newVotes);\n  }\n\n  render() {\n    const { isHost, data } = this.props;\n    const { nominations, mission } = data;\n    const isNom = nominations.roster.includes(this.pid);\n\n    const sortedPlayers = getCurrentPlayers(data);\n    const pendingTally = sortedPlayers.filter(p => nominations.roster.includes(p.pid) && !mission.tally[p.pid]);\n\n    return (\n      <div>\n        <h1>Mission Vote</h1>\n\n        {isNom ? (\n          <div>\n            <h3> cast your mission vote </h3>\n            {mission.tally[this.pid] ? (\n              <div> you have voted </div>\n            ) : (\n                <div>\n                  <button onClick={() => this.voteSuccess()}>vote SUCCESS</button>\n                  <button onClick={() => this.voteFail()}>vote FAIL</button>\n                </div>\n              )}\n          </div>\n        ) : (\n            <div>\n              only nominated players can vote during the mission\n            </div>\n          )}\n\n        <h3>results!</h3>\n        {mission.showResults && Object.keys(mission.tally).length ? (\n          <div>\n            {Object.values(mission.tally).sort().reverse().map((vote, i) => (\n              <div key={i}>\n                {vote === MissionVoteType.Success ? (\n                  <Green>{vote.toUpperCase()}</Green>\n                ) : (\n                    <Red>{vote.toUpperCase()}</Red>\n                  )}\n              </div>\n            ))}\n          </div>\n        ) : (\n            <div>\n              {Object.keys(mission.tally).length}/{nominations.roster.length} votes counted\n              {pendingTally.length ? (\n                <div>\n                  <br />\n                  waiting for:\n                  {pendingTally.map(p => (\n                    <div key={p.pid}>{p.name}</div>\n                  ))}\n                </div>\n              ) : ''}\n            </div>\n          )}\n\n        {isHost && (\n          <HostBox>\n            <button onClick={() => this.toggleReveal()}>{mission.showResults ? 'hide' : 'show'} votes</button>\n            <button onClick={() => this.voteClear()}>clear all votes</button>\n          </HostBox>\n        )}\n      </div>\n    );\n  }\n}\n","import { hri } from \"human-readable-ids\";\nimport { UserState, ViewTab, ViewTabType } from \"./types\";\nimport { APP_VERSION } from \"./utils\";\n\nexport interface StorageLayer {\n  getItem(key: string): string | null;\n  setItem(key: string, value: string): void;\n}\n\nclass StorageSingleton {\n  store: StorageLayer = window.localStorage;\n  onSet: (val: UserState) => Promise<void> = () => Promise.resolve();\n\n  private getMinor(v: string) {\n    return (v || '0.0.0').split('.').slice(0, 2).join('.');\n  }\n\n  reset() {\n    this.set({\n      v: APP_VERSION,\n      pid: hri.random(),\n      name: undefined,\n      gid: undefined,\n      view: ViewTabType.Reset,\n    });\n  }\n  private set(data: UserState): Promise<void> {\n    this.store.setItem('state', JSON.stringify(data));\n    return this.onSet(data);\n  }\n  setName(name: string) {\n    return this.set({\n      ...this.get(),\n      name: name,\n    });\n  }\n  setGame(gid: string) {\n    return this.set({\n      ...this.get(),\n      gid: gid,\n    });\n  }\n  setView(view: ViewTab) {\n    return this.set({\n      ...this.get(),\n      view: view,\n    });\n  }\n  get(): UserState {\n    const stored = this.store.getItem('state') || '{}';\n    const data = JSON.parse(stored as any) as UserState;\n    const isValid = data && this.getMinor(data.v) === this.getMinor(APP_VERSION);\n    if (isValid) {\n      return data;\n    }\n    this.reset();\n    return this.get();\n  }\n}\n\nexport const STORAGE = new StorageSingleton();\n","import React from 'react';\nimport { STORAGE } from '../core/storage';\nimport { hri } from 'human-readable-ids';\nimport { isDev } from '../core/utils';\nimport { UserState } from '../core/types';\n\ninterface Props {\n  storage: UserState;\n  createGame(): void;\n  joinGame(id: string): void;\n}\ninterface State {\n  tempName: string;\n  tempJoin: string;\n}\n\nexport class ViewLobby extends React.Component<Props, State> {\n  state: State = {\n    tempName: isDev ? hri.random().split('-')[0] : '',\n    tempJoin: '',\n  };\n\n  setName() {\n    STORAGE.setName(this.state.tempName);\n  }\n\n  render() {\n    const { storage } = this.props;\n    const { tempName, tempJoin } = this.state;\n\n    if (!storage.name) {\n      return (\n        <div>\n          <h1>Enter your name</h1>\n          <input value={tempName} onChange={event => this.setState({ tempName: event.target.value, })} />\n          <button onClick={() => this.setName()}>confirm</button>\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        <h1>Find a Game</h1>\n\n        <div>\n          <button onClick={() => this.props.createGame()}>create new game</button>\n        </div>\n\n        <h3>or</h3>\n\n        <div>\n          <input\n            value={tempJoin}\n            onChange={event => this.setState({ tempJoin: event.target.value, })}\n            placeholder=\"enter game id\"\n          />\n          <br />\n          <br />\n          <button onClick={() => this.props.joinGame(tempJoin)}>join game</button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { UserState } from '../core/types';\n\ninterface Props {\n  storage: UserState,\n  reset(): void;\n}\ninterface State { }\n\nexport class ViewReset extends React.Component<Props, State> {\n  tryReset() {\n    const { gid } = this.props.storage;\n    let confirmed = true;\n    if (gid) {\n      confirmed = window.confirm(\"Are you sure you want to reset?\\nIf you leave a game in progress, you will not be able to rejoin.\");\n    }\n    if (confirmed) {\n      this.props.reset();\n    }\n  }\n  render() {\n    const { storage } = this.props;\n    return (\n      <div>\n        <h1>Current Local State</h1>\n        <pre>\n          {JSON.stringify(storage, null, 2)}\n        </pre>\n        <div>\n          <button onClick={() => this.tryReset()}>Leave game and reset local data</button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { GameData, MissionResults, UserState } from '../core/types';\nimport { FIREBASE } from '../core/firebase';\nimport { HostBox, Board, MissionIcon } from './shared';\n\ninterface Props {\n  data: GameData;\n  isHost: boolean;\n  storage: UserState;\n}\ninterface State { }\n\nexport class ViewGame extends React.Component<Props, State> {\n  async nextTurn() {\n    const { gid, turn } = this.props.data;\n    if (!turn) { return; }\n    const currentIndex = turn.order.indexOf(turn.current);\n    const nextIndex = (currentIndex + 1) % turn.order.length;\n    const newCurrent = turn.order[nextIndex];\n    await FIREBASE.updateTurn(gid, {\n      ...turn,\n      current: newCurrent,\n    });\n    await FIREBASE.clearNominations(gid);\n    await FIREBASE.clearMission(gid);\n  }\n  async missionChange(mIndex: number) {\n    const { isHost, data } = this.props;\n    if (!isHost) { return; }\n    const { gid, board } = data;\n    const mission = board.missions[mIndex];\n    const currIndex = MissionResults.indexOf(mission.result);\n    const nextIndex = (currIndex + 1) % MissionResults.length;\n    const nextState = MissionResults[nextIndex];\n    mission.result = nextState;\n    await FIREBASE.updateBoard(gid, board);\n  }\n\n  async setMissionNoms(mIndex: number) {\n    const { isHost, data } = this.props;\n    if (!isHost) { return; }\n    const { gid, board } = data;\n    const mission = board.missions[mIndex];\n    mission.roster = data.nominations.roster;\n    await FIREBASE.updateBoard(gid, board);\n  }\n  async clearMissionNoms(mIndex: number) {\n    const { isHost, data } = this.props;\n    if (!isHost) { return; }\n    const { gid, board } = data;\n    const mission = board.missions[mIndex];\n    mission.roster = null;\n    await FIREBASE.updateBoard(gid, board);\n  }\n  async addVeto(delta: number) {\n    const { isHost, data } = this.props;\n    if (!isHost) { return; }\n    const { gid, vetoes } = data;\n    await FIREBASE.updateVetoes(gid, vetoes + delta);\n  }\n\n  render() {\n    const { isHost, data } = this.props;\n    const { board, turn, players, vetoes } = data;\n    const anyDoubleFails = board.missions.some(m => m.neededFails > 1);\n\n    return (\n      <div>\n        <h1>Game #{data.gid}</h1>\n        {turn && (\n          <div>\n            {isHost && (\n              <HostBox>\n                <button onClick={() => this.nextTurn()}>\n                  Next Turn\n                </button>\n              </HostBox>\n            )}\n          </div>\n        )}\n\n        <Board>\n          {board.missions.map((m, index) => (\n            <div key={index}>\n              <MissionIcon result={m.result} onClick={() => this.missionChange(index)}>\n                {m.required}\n              </MissionIcon>\n              {anyDoubleFails && (\n                m.neededFails > 1 ? (\n                  <div>\n                    {m.neededFails} fails needed\n                  </div>\n                ) : <br />\n              )}\n              {m.roster && m.roster.map(pid => (\n                <div key={pid}>\n                  {players[pid].name}\n                </div>\n              ))}\n              {isHost && (\n                <HostBox>\n                  {m.roster ? (\n                    <button onClick={() => this.clearMissionNoms(index)}>\n                      remove<br />noms\n                    </button>\n                  ) : (\n                      <button onClick={() => this.setMissionNoms(index)}>\n                        set<br />noms\n                      </button>\n                    )}\n                </HostBox>\n              )}\n            </div>\n          ))}\n        </Board>\n        <div>\n          Missions are played left to right. The number is how many people are required for each mission.\n          <br />\n          It only takes 1 FAIL to win the mission for Red. First team to 3 missions wins.\n        </div>\n\n        <h3>\n          Vetoes: {vetoes}/4\n        </h3>\n        <div>\n          When the number of vetoes reaches 4, the nomination automatically goes to mission without a group vote.\n        </div>\n\n        {isHost && (\n          <HostBox>\n            <button onClick={() => this.addVeto(1)}>+</button>\n            <button onClick={() => this.addVeto(-1)}>-</button>\n          </HostBox>\n        )}\n\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { AllRoles } from '../core/role';\nimport { GameData, Role, Roles, UserState, PlayerData } from '../core/types';\nimport { getBoardFor, shuffle, sortObjVals, getCurrentPlayers } from \"../core/utils\";\nimport { FIREBASE } from '../core/firebase';\nimport { HostBox, Blue, Red } from './shared';\n\nconst DeleteLink = styled.span`\n  cursor: pointer;\n  text-decoration: underline;\n  color: red;\n`;\n\nconst ErrorMessage = styled.span`\n  color: red;\n`;\n\ninterface Props {\n  isHost: boolean;\n  data: GameData;\n  storage: UserState;\n}\ninterface State {\n  errorMessage?: string;\n}\n\nexport class ViewSetup extends React.Component<Props, State> {\n  state: State = {}\n\n  async addRole(role: Role) {\n    const newRoles = [...this.props.data.roles];\n    newRoles.push(role);\n    newRoles.sort();\n    await FIREBASE.updateRoles(this.props.data.gid, newRoles);\n  }\n  async removeRole(role: Role) {\n    const newRoles = [...this.props.data.roles];\n    const index = newRoles.findIndex(r => r === role);\n    if (index >= 0) {\n      newRoles.splice(index, 1);\n      await FIREBASE.updateRoles(this.props.data.gid, newRoles);\n    }\n  }\n  async assign() {\n    const { gid, players, roles, includeLady } = this.props.data;\n    if (Object.keys(players).length !== roles.length) {\n      return this.setState({\n        errorMessage: 'you need the same number of roles as players',\n      });\n    }\n    this.setState({ errorMessage: undefined });\n    const shuffledPlayers = shuffle(Object.keys(players));\n    const shuffledRoles = shuffle(roles);\n    shuffledPlayers.forEach((pid, index) => {\n      players[pid].role = shuffledRoles[index];\n      players[pid].hasLady = false;\n      players[pid].sawLady = null;\n    });\n    await FIREBASE.updateBoard(gid, getBoardFor(roles.length));\n    await FIREBASE.updatePlayers(gid, players);\n    await FIREBASE.updateTurn(gid, {\n      current: shuffledPlayers[0],\n      order: shuffledPlayers,\n    });\n    await FIREBASE.clearNominations(gid);\n    await FIREBASE.clearMission(gid);\n    if (includeLady) {\n      await FIREBASE.giveLadyTo(gid, shuffledPlayers.slice(-1)[0]);\n    }\n  }\n  async clear() {\n    const { gid, players } = this.props.data;\n    Object.keys(players).forEach((id, index) => {\n      players[id].role = null; // null for Firebase\n    });\n    await FIREBASE.updatePlayers(gid, players);\n    await FIREBASE.updateTurn(gid, null);\n    await FIREBASE.hidePlayers(gid);\n  }\n\n  renderReveal(players: PlayerData[]) {\n    return (\n      <ul>\n        {players.map((p, i) => {\n          const role = p.role && AllRoles[p.role];\n          const roleName = role ? role.name : '???';\n          const Color = (role && role.isRed) ? Red : Blue;\n          return (\n            <li key={i}>\n              {p.name}: <Color>{roleName}</Color>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n  renderRoles(roles: Role[], canEdit: boolean) {\n    return (\n      <ul>\n        {roles.map((role, i) => {\n          const data = AllRoles[role];\n          const Color = data.isRed ? Red : Blue;\n          return (\n            <li key={i}>\n              {canEdit && <DeleteLink onClick={() => this.removeRole(role)}>X</DeleteLink>}\n              &nbsp;<Color>{data.name}</Color>\n              &nbsp;<i>({data.description})</i>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n  renderAdd(roles: Role[]) {\n    return (\n      <div>\n        {roles.map((r, i) => (\n          <button key={i} onClick={() => this.addRole(r)}>\n            {AllRoles[r].name}\n          </button>\n        ))}\n      </div>\n    )\n  }\n  render() {\n    const { isHost, data } = this.props;\n    const { errorMessage } = this.state;\n\n    const allPlayers = sortObjVals(data.players, p => p.name);\n    const isAssigned = allPlayers.some(p => p.role);\n    const canEdit = isHost && !isAssigned;\n    const currentPlayers = isAssigned ? getCurrentPlayers(data) : allPlayers;\n\n    const redRoles = Object.values(data.roles).filter(r => AllRoles[r].isRed);\n    const blueRoles = Object.values(data.roles).filter(r => !AllRoles[r].isRed);\n\n    return (\n      <div>\n        <h1>Setup</h1>\n\n        <h3>\n          Players: {currentPlayers.length}\n        </h3>\n        <div>\n          {currentPlayers.map(o => o.name).join(', ')}\n        </div>\n\n        {isHost && (\n          <HostBox>\n            {isAssigned ? (\n              data.reveal ? (\n                <button onClick={() => this.clear()}>Clear roles and reset game</button>\n              ) : (\n                <button onClick={() => FIREBASE.revealPlayers(data.gid)}>\n                  End game and reveal all roles\n                </button>\n              )\n            ) : (\n                <div>\n                  {this.renderAdd(Roles.filter(r => AllRoles[r].isRed))}\n                  <br />\n                  {this.renderAdd(Roles.filter(r => !AllRoles[r].isRed))}\n                  <br />\n                  <div>\n                    <button onClick={() => FIREBASE.setIncludeLady(data.gid, !data.includeLady)}>\n                      {data.includeLady ? 'Lady of the Lake is ON' : 'Lady of the Lake is OFF'}\n                    </button>\n                  </div>\n                  <br />\n                  <div>\n                    <button onClick={() => this.assign()}>ASSIGN ROLES</button>\n                    {errorMessage && (\n                      <ErrorMessage>{errorMessage}</ErrorMessage>\n                    )}\n                    </div>\n                </div>\n              )}\n          </HostBox>\n        )}\n\n        {data.reveal && (\n          <div>\n            <h3>GAME OVER! This was everyone's identity:</h3>\n            {this.renderReveal(currentPlayers)}\n          </div>\n        )}\n\n        <h3>Red Roles ({redRoles.length})</h3>\n        {this.renderRoles(redRoles, canEdit)}\n\n        <h3>Blue Roles ({blueRoles.length})</h3>\n        {this.renderRoles(blueRoles, canEdit)}\n\n        {isHost && (\n          <HostBox>\n            <h3>Kick Player</h3>\n            <p>\n              Mostly an emergency tool if someone resets their info.\n              <br />\n              If the player refreshes without resetting their info, they will rejoin.\n            </p>\n\n            {allPlayers.map(p => (\n              <button key={p.pid} onClick={() => FIREBASE.kickPlayer(data, p.pid)}>\n                {p.name}\n              </button>\n            ))}\n          </HostBox>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { CSSProperties } from 'react';\nimport styled from 'styled-components';\nimport { AllRoles } from '../core/role';\nimport { GameData, RoleType, UserState } from '../core/types';\nimport { StyledBox } from './shared';\nimport { getCurrentPlayers } from '../core/utils';\n\nexport const SecretBox = styled(StyledBox)`\n  background-color: black;\n  color: white;\n  border-color: red;\n  cursor: pointer;\n`;\n\nexport const RoleBox = styled(StyledBox)`\n  border-color: black;\n  background-color: #eeeeee;\n\n  & span {\n    margin: 0 0.1em;\n  }\n`;\n\ninterface Props {\n  storage: UserState;\n  data: GameData;\n}\ninterface State {\n  collapseSecrets: boolean;\n}\n\nexport class ViewBar extends React.Component<Props, State> {\n  state: State = {\n    collapseSecrets: false,\n  };\n\n  render() {\n    const { storage, data } = this.props;\n    const { collapseSecrets } = this.state;\n    const me = data.players[storage.pid] || {\n      name: storage.name,\n    };\n    const myData = AllRoles[me.role || RoleType.BasicBlue];\n    const others = (data.turn ? data.turn.order : []).filter(id => id !== storage.pid).map(key => data.players[key]);\n    const youSee = others.filter(o => o.role && myData.sees.includes(o.role)).map(o => o.name);\n\n    const nominations = data.nominations.roster.length > 0 ? data.nominations.roster.map(pid => data.players[pid].name).join(', ') : '(nobody)';\n    const playerIds = data.turn ? data.turn.order : getCurrentPlayers(data).map(p => p.pid);\n\n    return (\n      <div>\n        <SecretBox onClick={() => this.setState({ collapseSecrets: !collapseSecrets, })}>\n          {collapseSecrets ? (\n            <div>\n              (click to show secret info)\n            </div>\n          ) : (\n              <div>\n                <div>\n                  <u>\n                    SECRET INFO! do not discuss what's in this box! click to hide from nearby players!\n                    </u>\n                </div>\n                {me.role ? (\n                  <div>\n                    you are: <b>{myData.name}</b>. you see: <b>{youSee.join(', ') || '(nobody)'}</b>\n                    <br />\n                    {myData.description}\n                  </div>\n                ) : (\n                    <div>\n                      roles haven't been assigned yet\n                    </div>\n                  )}\n              </div>\n            )}\n        </SecretBox>\n        <RoleBox>\n          <div>\n            turn order: {playerIds.map((pid, index, array) => {\n            const pdata = data.players[pid];\n            const name = (pdata ? pdata.name : '???') + (index < array.length - 1 ? ',' : '');\n            const style: CSSProperties = {\n              color: pid === data.host ? 'purple' : 'black',\n              textDecoration: (data.turn && pid === data.turn.current) ? 'underline' : 'none',\n            };\n            return (\n              <span key={pid} style={style}>\n                {name}\n              </span>\n            );\n          })}\n          </div>\n          <div>\n            nomination: {nominations}\n          </div>\n        </RoleBox>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { GameData, NominationType, MissionResultType, UserState } from '../core/types';\nimport { FIREBASE } from '../core/firebase';\nimport { HostBox, Green, Red } from './shared';\nimport { getCurrentPlayers } from '../core/utils';\n\ninterface Props {\n  isHost: boolean;\n  data: GameData;\n  storage: UserState;\n}\ninterface State { }\n\nexport class ViewNominate extends React.Component<Props, State> {\n  pid = this.props.storage.pid;\n  state: State = {};\n\n  async voteSuccess() {\n    await FIREBASE.updateNominationsTally(this.props.data.gid, this.pid, NominationType.Approve);\n  }\n  async voteFail() {\n    await FIREBASE.updateNominationsTally(this.props.data.gid, this.pid, NominationType.Reject);\n  }\n  async voteClear() {\n    const newVotes = { ...this.props.data.nominations, };\n    newVotes.tally = {};\n    newVotes.showResults = false;\n    newVotes.dealerLocked = false;\n    await FIREBASE.updateNominations(this.props.data.gid, newVotes);\n  }\n  async toggleReveal() {\n    const newVotes = { ...this.props.data.nominations, };\n    newVotes.showResults = !newVotes.showResults;\n    await FIREBASE.updateNominations(this.props.data.gid, newVotes);\n  }\n  async lockTheNoms() {\n    const isDealer = this.getIsDealer();\n    if (!isDealer) {\n      return alert('only the dealer should be able to lock the nom! error!');\n    }\n    const newVotes = { ...this.props.data.nominations, };\n    newVotes.dealerLocked = true;\n    await FIREBASE.updateNominations(this.props.data.gid, newVotes);\n  }\n\n  getIsDealer() {\n    const { data } = this.props;\n    const { nominations } = data;\n    return data.turn && (data.turn.current === this.pid) && !nominations.showResults;\n  }\n\n  async addToRoster(pid: string) {\n    const { nominations } = this.props.data;\n    const newRoster = [...nominations.roster];\n    newRoster.push(pid);\n    newRoster.sort();\n    await FIREBASE.updateNominations(this.props.data.gid, {\n      ...nominations,\n      roster: newRoster,\n    });\n  }\n  async removeFromRoster(pid: string) {\n    const { nominations } = this.props.data;\n    const newRoster = [...nominations.roster];\n    const index = newRoster.findIndex(p => p === pid);\n    if (index >= 0) {\n      newRoster.splice(index, 1);\n      await FIREBASE.updateNominations(this.props.data.gid, {\n        ...nominations,\n        roster: newRoster,\n      });\n    }\n  }\n\n  render() {\n    const { isHost, data } = this.props;\n    const { nominations, players } = data;\n    const isDealer = this.getIsDealer();\n    const sortedPlayers = getCurrentPlayers(data);\n    const outOfRoster = sortedPlayers.filter(p => !nominations.roster.includes(p.pid));\n    const sortedTally = Object.keys(nominations.tally).sort();\n    const pendingTally = sortedPlayers.filter(p => !nominations.tally[p.pid]);\n\n    const currentMission = data.board.missions.filter(m => m.result === MissionResultType.Neutral)[0];\n    const currentNeeded = currentMission ? currentMission.required : '???';\n\n    return (\n      <div>\n        <h1>Nominate for Mission</h1>\n\n        <div>This mission requires {currentNeeded} people.</div>\n\n        <h3>Nominated:</h3>\n        <div>\n          {nominations.roster.length ? (\n            (isDealer && !nominations.dealerLocked) ? nominations.roster.map((pid, i) => (\n              <button key={i} onClick={() => this.removeFromRoster(pid)}>\n                {players[pid].name}\n              </button>\n            )) : (\n                nominations.roster.map(pid => players[pid].name).join(', ')\n              )\n          ) : (\n              'nobody has been nominated yet'\n            )}\n        </div>\n\n        {isDealer && (\n          nominations.dealerLocked ? (\n            <div>\n              <br />\n              <button onClick={() => this.voteClear()}>Clear votes and change the nomination</button>\n            </div>\n          ) : (\n              <div>\n                <h3>Add to Nomination:</h3>\n                <div>\n                  {outOfRoster.length > 0 ? (\n                    outOfRoster.map((p, i) => (\n                      <button key={i} onClick={() => this.addToRoster(p.pid)}>\n                        {p.name}\n                      </button>\n                    ))\n                  ) : (\n                      'everyone has been nominated'\n                    )}\n                </div>\n              </div>\n            ))}\n\n        {!nominations.dealerLocked ? (\n          <div>\n            <h3>\n              waiting for nomination to be locked in...\n            </h3>\n            {isDealer && (\n              <div>\n                <button onClick={() => this.lockTheNoms()}>Lock and start voting</button>\n              </div>\n            )}\n          </div>\n        ) : (\n            <div>\n              <h3>cast your vote for who goes on the mission</h3>\n\n              {nominations.tally[this.pid] && (\n                <div>\n                  you have voted\n                </div>\n              )}\n              {!nominations.showResults && (\n                <div>\n                  <button onClick={() => this.voteSuccess()}>vote SUPPORT</button>\n                  <button onClick={() => this.voteFail()}>vote REJECT</button>\n                </div>\n              )}\n\n              {isHost && (\n                <HostBox>\n                  <button onClick={() => this.toggleReveal()}>{nominations.showResults ? 'hide' : 'show'} votes</button>\n                  <button onClick={() => this.voteClear()}>clear all votes</button>\n                </HostBox>\n              )}\n\n              <h3>results!</h3>\n\n              {nominations.showResults && Object.keys(nominations.tally).length ? (\n                <div>\n                  {sortedTally.map((pid, i) => (\n                    <div key={i}>\n                      {data.players[pid].name}:&nbsp;\n                      {nominations.tally[pid] === NominationType.Approve ? (\n                        <Green>{nominations.tally[pid].toUpperCase()}</Green>\n                      ) : (\n                          <Red>{nominations.tally[pid].toUpperCase()}</Red>\n                        )}\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                  <div>\n                    {Object.keys(nominations.tally).length}/{sortedPlayers.length} votes counted\n                    {pendingTally.length ? (\n                      <div>\n                        <br />\n                    waiting for:\n                        {pendingTally.map(p => (\n                          <div key={p.pid}>{p.name}</div>\n                        ))}\n                      </div>\n                    ) : ''}\n                  </div>\n                )}\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { GameData, UserState } from '../core/types';\nimport { FIREBASE } from '../core/firebase';\nimport { AllRoles } from '../core/role';\nimport { Red, Blue } from './shared';\nimport { getCurrentPlayers } from '../core/utils';\n\ninterface Props {\n  isHost: boolean;\n  data: GameData;\n  storage: UserState;\n}\ninterface State { }\n\nexport class ViewLady extends React.Component<Props, State> {\n  pid = this.props.storage.pid;\n  state: State = {};\n\n  async examine(sawPid: string) {\n    const { pid } = this;\n    const { gid } = this.props.data;\n    await FIREBASE.giveLadyTo(gid, sawPid);\n    await FIREBASE.takeLadyFrom(gid, pid);\n    await FIREBASE.ladySaw(gid, pid, sawPid);\n  }\n\n  render() {\n    const { data } = this.props;\n    const { players, includeLady } = data;\n\n    const myPlayer = players[this.pid];\n    const examinedPlayer = myPlayer.sawLady && players[myPlayer.sawLady];\n    const examinedRole = examinedPlayer && examinedPlayer.role && AllRoles[examinedPlayer.role];\n    const ExaminedColor = examinedRole && examinedRole.isRed ? Red : Blue;\n\n    const currentPlayers = getCurrentPlayers(data);\n    const currentPlayer = currentPlayers.filter(p => p.hasLady)[0];\n    const currentName = currentPlayer && currentPlayer.name;\n    const previousOwners = currentPlayers.filter(p => !!p.sawLady);\n    const eligible = currentPlayers.filter(p => p.pid !== this.pid && !p.sawLady);\n\n    return (\n      <div>\n        <h1>Lady of the Lake</h1>\n\n        <p>\n          At the beginning of the game, the Lady of the Lake (aka Lady) is given to the last player in the turn order.\n        </p>\n        <p>\n          After the 2nd, 3rd, and 4th mission in finished, the player with the Lady will choose one player to examine.\n        </p>\n        <p>\n          They will learn the team color (Red/Blue) of the chosen player. They will NOT learn their identity (eg: Merlin).\n        </p>\n        <p>\n          After this information is revealed, the Lady will transfer to the examined player, so that they may use it after the next mission.\n        </p>\n        <p>\n          A player that used the Lady cannot have the Lady used on them.\n        </p>\n\n        {(includeLady && currentPlayer) ? (\n          <div>\n            <h3>{currentName} has the Lady of the Lake</h3>\n            {previousOwners.length > 0 && (\n              <div>\n                Previous Lady holders: {previousOwners.map(p => p.name).join(', ')}\n              </div>\n            )}\n            {currentPlayer.pid === this.pid && (\n              <div>\n                <p>\n                  <u>\n                    Choose a player to examine:\n                  </u>\n                </p>\n                <div>\n                  {eligible.map(p => (\n                    <button\n                      key={p.pid}\n                      onClick={() => this.examine(p.pid)}>\n                        {p.name}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n            {(examinedPlayer && examinedRole) && (\n              <h3>\n                You examined {examinedPlayer.name} and saw <ExaminedColor>{examinedRole.isRed ? 'RED' : 'BLUE'}</ExaminedColor>\n              </h3>\n            )}\n          </div>\n        ) : (\n          <h3>\n            <Red>\n              Lady of the Lady is not enabled for this game\n            </Red>\n          </h3>\n        )}\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ViewDebug } from \"./ViewDebug\";\nimport { ViewMission } from \"./ViewMission\";\nimport { ViewLobby } from \"./ViewLobby\";\nimport { ViewReset } from \"./ViewReset\";\nimport { FIREBASE } from \"../core/firebase\";\nimport { GameData, PlayersById, UserState, ViewTabType, ViewTab } from \"../core/types\";\nimport { isDebug, getBoardFor, randomId, APP_VERSION } from \"../core/utils\";\nimport { STORAGE } from \"../core/storage\";\nimport { ViewGame } from \"./ViewGame\";\nimport { ViewSetup } from \"./ViewSetup\";\nimport { ViewBar } from \"./ViewBar\";\nimport { ViewNominate } from \"./ViewNominate\";\nimport { ViewLady } from \"./ViewLady\";\nimport { StyledBox } from \"./shared\";\n\nconst HeaderLink = styled(StyledBox) <{ current: boolean, hasLink: boolean }>`\n  margin: 0 0.5em;\n  margin-top: 0;\n  border-color: #00000000;\n  border-top-width: 0;\n  & a {\n    color: inherit;\n  }\n\n  ${props => props.hasLink ? `\n    & span {\n      cursor: pointer;\n      text-decoration: underline;\n    }\n  ` : ''}\n\n  ${props => props.current ? `\n    border-color: grey;\n  ` : ''}\n\n  &:first-child {\n    margin-left: 0;\n  }\n`;\n\ninterface Props { }\ninterface State {\n  storage: UserState;\n  data?: GameData;\n}\n\ninterface LinkProps {\n  type?: ViewTab;\n}\n\nexport class ViewHub extends React.Component<Props, State> {\n  state: State = {\n    storage: STORAGE.get(),\n  };\n  componentDidMount() {\n    STORAGE.onSet = val => new Promise((resolve, reject) => {\n      this.setState({ storage: val }, resolve);\n    });\n    const { storage } = this.state;\n    if (storage.name && storage.gid) {\n      try {\n        this.join(this.genGuestGameData());\n      } catch (e) {\n        // bubble up to ErrorBoundary\n        this.setState(() => { throw e; });\n      }\n    } else {\n      STORAGE.setView(ViewTabType.Lobby);\n    }\n  }\n\n  private genHostGameData(): GameData {\n    const { pid } = this.state.storage;\n    return {\n      ...this.genGuestGameData(),\n      host: pid,\n    };\n  }\n  private genGuestGameData(): GameData {\n    const { pid, name, gid } = this.state.storage;\n    if (!gid) {\n      throw new Error('game should be set in localStorage');\n    }\n    return {\n      gid: gid,\n      host: undefined,\n      board: getBoardFor(7),\n      nominations: {\n        showResults: false,\n        dealerLocked: false,\n        roster: [],\n        tally: {},\n      },\n      roles: [],\n      players: {\n        [pid]: {\n          pid: pid,\n          name: name || '???',\n          hasLady: false,\n          sawLady: null,\n        },\n      },\n      turn: null,\n      vetoes: 0,\n      mission: {\n        showResults: false,\n        tally: {},\n      },\n      includeLady: false,\n      reveal: false,\n    };\n  }\n\n  private async join(localData: GameData) {\n    const { storage } = this.state;\n    if (localData.host) {\n      await FIREBASE.updateGame(localData);\n    } else {\n      // if joining a game, ensure self and broadcast\n      const hostData = await FIREBASE.getGameData(localData.gid);\n      if (!hostData) {\n        // if no game data for old id, reset\n        this.reset();\n        return;\n      }\n\n      // add self to host.players, but prefer local name\n      const myId = storage.pid;\n      const localMe = localData.players[myId];\n      const remoteMe = hostData.players[myId] || {};\n      const players: PlayersById = {\n        ...hostData.players,\n        [myId]: {\n          ...localMe,\n          ...remoteMe,\n          name: localMe.name,\n        },\n      };\n      await FIREBASE.updatePlayers(localData.gid, players);\n    }\n    if (storage.view === ViewTabType.Lobby) {\n      STORAGE.setView(ViewTabType.Game);\n    }\n    await FIREBASE.joinGame(localData.gid, data => this.onReceive(data));\n  }\n  private onReceive(data: GameData) {\n    console.log('received:', data);\n    this.setState({\n      data: {\n        roles: [],\n        turn: null,\n        ...data,\n        nominations: {\n          roster: [],\n          tally: {},\n          ...data.nominations,\n        },\n        mission: {\n          tally: {},\n          ...data.mission,\n        },\n      }\n    });\n  }\n\n  async createGame() {\n    await STORAGE.setGame(randomId(3));\n    await this.join(this.genHostGameData());\n  }\n  async joinGame(gameId: string) {\n    await STORAGE.setGame(gameId);\n    await this.join(this.genGuestGameData());\n  }\n  async reset() {\n    const { data, storage } = this.state;\n    if (storage.gid) {\n      await FIREBASE.leaveGame(storage.gid);\n    }\n    if (data) {\n      await FIREBASE.kickPlayer(data, storage.pid);\n    }\n    this.setState({\n      data: undefined,\n    }, () => STORAGE.reset());\n  }\n\n  renderMain() {\n    const { storage, data } = this.state;\n    const { pid, view } = storage;\n    const isHost = !!data && pid === data.host;\n    if (view === ViewTabType.Game && data) {\n      return <ViewGame isHost={isHost} data={data} storage={storage} />\n    }\n    if (view === ViewTabType.Setup && data) {\n      return <ViewSetup isHost={isHost} data={data} storage={storage} />\n    }\n    if (view === ViewTabType.Nominate && data) {\n      return <ViewNominate isHost={isHost} data={data} storage={storage} />\n    }\n    if (view === ViewTabType.Mission && data) {\n      return <ViewMission isHost={isHost} data={data} storage={storage} />\n    }\n    if (view === ViewTabType.Lady && data) {\n      return <ViewLady isHost={isHost} data={data} storage={storage} />\n    }\n\n    if (view === ViewTabType.Lobby && !data) {\n      return <ViewLobby\n        storage={storage}\n        createGame={() => this.createGame()}\n        joinGame={gid => this.joinGame(gid)}\n      />\n    }\n\n    if (view === ViewTabType.Reset) {\n      return <ViewReset\n        storage={storage}\n        reset={() => this.reset()}\n      />\n    }\n    if (view === ViewTabType.Debug) {\n      return <ViewDebug />\n    }\n\n    if (view === ViewTabType.Loading) {\n      return (\n        <h3>\n          connecting to server, please wait...\n        </h3>\n      );\n    }\n\n    return (\n      <div>\n        <h3>you have reached an invalid state :(</h3>\n        <div>view: {view}</div>\n        <div>data: {!!data}</div>\n        <h3>please try refreshing and/or reset your local state</h3>\n      </div>\n    )\n  }\n\n  Link: React.StatelessComponent<LinkProps> = (props) => {\n    const { type } = props;\n    const onClick = !!type ? () => STORAGE.setView(type) : () => { };\n    return (\n      <HeaderLink\n        current={type === this.state.storage.view}\n        hasLink={!!type}\n        onClick={onClick}\n      >\n        <span>{props.children}</span>\n      </HeaderLink>\n    );\n  }\n\n  render() {\n    const { storage, data } = this.state;\n    return (\n      <div>\n        <nav>\n          <ul>\n            {data && <this.Link type={ViewTabType.Game}>Game #{data.gid}</this.Link>}\n            {data && <this.Link type={ViewTabType.Nominate}>Nominate</this.Link>}\n            {data && <this.Link type={ViewTabType.Mission}>Mission</this.Link>}\n            {data && <this.Link type={ViewTabType.Lady}>Lady of the Lake</this.Link>}\n            {data && <this.Link type={ViewTabType.Setup}>Setup</this.Link>}\n            {!data && <this.Link type={ViewTabType.Lobby}>Lobby</this.Link>}\n            <this.Link type={ViewTabType.Reset}>Reset</this.Link>\n            {isDebug && <this.Link type={ViewTabType.Debug}>Debug</this.Link>}\n            <this.Link>\n              <a target=\"_blank\" href=\"rules.pdf\">Rules</a>\n            </this.Link>\n            <this.Link>v.{APP_VERSION}</this.Link>\n          </ul>\n        </nav>\n\n        {data && (\n          <ViewBar data={data} storage={storage} />\n        )}\n\n        {this.renderMain()}\n\n      </div>\n    );\n  }\n}\n","import React, { ErrorInfo } from 'react';\nimport { STORAGE } from '../core/storage';\n\ninterface Props {}\ninterface State {\n  hasError: boolean;\n}\n\nexport class ErrorBoundary extends React.Component<Props, State> {\n  state: State = {\n    hasError: false,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error: Error, info: ErrorInfo) {\n    console.log('error caught by boundary!', error, info);\n    this.setState({ hasError: true });\n  }\n\n  reset() {\n    STORAGE.reset();\n    window.location.reload();\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div>\n          <h1>Something went wrong.</h1>\n          Try refreshing first. If that doesn't work and you're stuck on this screen, <button onClick={() => this.reset()}>RESET LOCAL DATA</button>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ViewHub } from './fe/ViewHub';\nimport { ErrorBoundary } from './fe/ErrorBoundary';\n\nReactDOM.render(\n  <ErrorBoundary>\n    <ViewHub />\n  </ErrorBoundary>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
{"version":3,"sources":["core/firebase.ts","fe/ViewDebug.tsx","core/types.ts","core/role.ts","fe/shared.tsx","core/utils.ts","fe/ViewMission.tsx","core/storage.ts","fe/ViewLobby.tsx","fe/ViewReset.tsx","fe/ViewGame.tsx","fe/ViewSetup.tsx","fe/ViewBar.tsx","fe/ViewNominate.tsx","fe/ViewHub.tsx","index.tsx"],"names":["dotenv","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","FIREBASE","db","isOnline","firebase","initializeApp","this","database","console","log","Promise","resolve","reject","ref","once","resp","data","val","Object","values","game","playerId","gid","nominations","players","turn","mission","roster","filter","pid","tally","order","current","updateNominations","updatePlayers","updateTurn","updateMission","set","gameId","showResults","dealerLocked","callback","on","off","ViewDebug","state","games","getAllGames","then","setState","href","map","key","p","onClick","kickPlayer","name","deleteAllGames","React","Component","ViewTabType","MissionVoteType","NominationType","MissionResultType","Blue","Red","Neutral","MissionResults","Roles","RoleType","reduce","obj","r","reds","BasicRed","Assassin","Morgana","Mordred","Oberon","redsMinusMordred","redsMinusOberon","AllRoles","BasicBlue","isRed","description","sees","Merlin","Percival","Green","styled","span","StyledBox","div","HostBox","Flex","Board","MissionIcon","props","result","isDev","window","location","includes","isDebug","orig","toUpperCase","sortObjVals","keyFunc","arr","concat","sort","a","b","ka","kb","shuffle","temporaryValue","randomIndex","array","currentIndex","length","Math","floor","random","getBoardFor","count","missions","required","neededFails","vetos","ViewMission","storage","me","role","updateMissionTally","newVotes","isHost","isNom","pendingTally","voteSuccess","voteFail","keys","reverse","vote","i","toggleReveal","voteClear","STORAGE","store","localStorage","onSet","v","split","slice","join","hri","undefined","view","setItem","JSON","stringify","get","stored","getItem","parse","getMinor","reset","ViewLobby","tempName","tempJoin","setName","createGame","value","onChange","event","target","placeholder","joinGame","ViewReset","confirmed","confirm","tryReset","ViewGame","nextIndex","indexOf","newCurrent","clearNominations","clearMission","mIndex","board","nextState","updateBoard","delta","vetoes","updateVetoes","anyDoubleFails","some","m","nextTurn","index","missionChange","clearMissionNoms","setMissionNoms","addVeto","DeleteLink","ErrorMessage","ViewSetup","newRoles","roles","push","updateRoles","findIndex","splice","errorMessage","shuffledPlayers","shuffledRoles","forEach","id","canEdit","removeRole","addRole","isAssigned","redRoles","blueRoles","sortedPlayers","o","clear","renderAdd","assign","renderRoles","SecretBox","RoleBox","ToggleSecrets","ViewBar","collapseSecrets","myData","youSee","playerIds","pdata","style","color","host","textDecoration","ViewNominate","updateNominationsTally","getIsDealer","alert","newRoster","isDealer","outOfRoster","sortedTally","currentMission","currentNeeded","removeFromRoster","addToRoster","lockTheNoms","HeaderLink","hasLink","ViewHub","Link","type","setView","children","genGuestGameData","Error","localData","updateGame","getGameData","hostData","myId","localMe","remoteMe","onReceive","setGame","pow","toString","padStart","genHostGameData","leaveGame","renderMain","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3b8110c.chunk.js","sourcesContent":["import dotenv from 'dotenv';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport { BoardData, GameData, MissionData, MissionVote, Nomination, NominationData, PlayerData, Role, TurnData } from './types';\n\ndotenv.config();\nconst config = {\n  apiKey: process.env.REACT_APP_apiKey,\n  authDomain: process.env.REACT_APP_authDomain,\n  databaseURL: process.env.REACT_APP_databaseURL,\n  projectId: process.env.REACT_APP_projectId,\n  storageBucket: process.env.REACT_APP_storageBucket,\n  messagingSenderId: process.env.REACT_APP_messagingSenderId,\n  appId: process.env.REACT_APP_appId,\n  measurementId: process.env.REACT_APP_measurementId,\n};\n\nclass FirebaseSingleton {\n  private db: firebase.database.Database;\n  isOnline = true;\n\n  constructor() {\n    firebase.initializeApp(config);\n    this.db = firebase.database();\n  }\n\n  // debug\n  async getAllGames() {\n    console.log('fetching all game data');\n    return new Promise<GameData[]>((resolve, reject) => {\n      this.db.ref(`game`).once('value', resp => {\n        const data = resp.val();\n        console.log('got all games:', data)\n        resolve(Object.values(data || {}) as GameData[]);\n      });\n    });\n  }\n  async kickPlayer(game: GameData, playerId: string) {\n    const { gid, nominations, players, turn, mission } = game;\n    nominations.roster = (nominations.roster || []).filter(pid => pid !== playerId);\n    delete (nominations.tally || {})[playerId];\n    delete (players || {})[playerId];\n    if (turn) {\n      turn.order = turn.order.filter(pid => pid !== playerId);\n      if (turn.current === playerId) {\n        turn.current = turn.order[0];\n      }\n    }\n    delete (mission.tally || {})[playerId];\n    await this.updateNominations(gid, nominations);\n    await this.updatePlayers(gid, players);\n    await this.updateTurn(gid, turn);\n    await this.updateMission(gid, mission);\n  }\n  deleteAllGames() {\n    this.db.ref(`game`).set({});\n  }\n\n  clearMission(gameId: string) {\n    return this.updateMission(gameId, {\n      showResults: false,\n      tally: {},\n    });\n  }\n  clearNominations(gameId: string) {\n    return this.updateNominations(gameId, {\n      roster: [],\n      dealerLocked: false,\n      showResults: false,\n      tally: {},\n    });\n  }\n\n  updateGame(data: GameData) {\n    console.log('saving data:', data);\n    return this.db.ref(`game/${data.gid}`).set(data);\n  }\n  updateBoard(gameId: string, data: BoardData) {\n    return this.db.ref(`game/${gameId}/board`).set(data);\n  }\n  updateMission(gameId: string, data: MissionData) {\n    return this.db.ref(`game/${gameId}/mission`).set(data);\n  }\n  updateMissionTally(gameId: string, pid: string, data: MissionVote) {\n    return this.db.ref(`game/${gameId}/mission/tally/${pid}`).set(data);\n  }\n  updateNominations(gameId: string, data: NominationData) {\n    return this.db.ref(`game/${gameId}/nominations`).set(data);\n  }\n  updateNominationsTally(gameId: string, pid: string, data: Nomination) {\n    return this.db.ref(`game/${gameId}/nominations/tally/${pid}`).set(data);\n  }\n  updatePlayers(gameId: string, data: PlayerData) {\n    return this.db.ref(`game/${gameId}/players`).set(data);\n  }\n  updateRoles(gameId: string, data: Role[]) {\n    return this.db.ref(`game/${gameId}/roles`).set(data);\n  }\n  updateTurn(gameId: string, data: TurnData | null) {\n    return this.db.ref(`game/${gameId}/turn`).set(data || null);\n  }\n  updateVetoes(gameId: string, data: number) {\n    return this.db.ref(`game/${gameId}/vetoes`).set(data);\n  }\n\n  async getGameData(gameId: string) {\n    console.log('fetching game data');\n    return new Promise<GameData>((resolve, reject) => {\n      this.db.ref(`game/${gameId}`).once('value', resp => {\n        const data = resp.val();\n        console.log('got game data:', data)\n        resolve(data as GameData);\n      });\n    });\n  }\n\n  joinGame(gameId: string, callback: (val: any) => void): void {\n    console.log('enabling hook:', gameId);\n    this.db.ref(`game/${gameId}`).on('value', data => {\n      callback(data.val());\n    });\n  }\n  leaveGame(gameId: string): void {\n    console.log('disabling hook:', gameId);\n    this.db.ref(`game/${gameId}`).off('value');\n  }\n}\n\nexport const FIREBASE = new FirebaseSingleton();\n","import React from 'react';\nimport { GameData } from '../core/types';\nimport { FIREBASE } from '../core/firebase';\n\ninterface Props { }\ninterface State {\n  games: GameData[];\n}\n\nexport class ViewDebug extends React.Component<Props, State> {\n  state: State = {\n    games: [],\n  };\n\n  componentDidMount() {\n    FIREBASE.getAllGames().then(games => this.setState({ games: games, }));\n  }\n  render() {\n    const { games } = this.state;\n    return (\n      <div>\n        <h1>Debugging Health Info</h1>\n        <p>\n          <a href=\"https://mpaulweeks.github.io/avalon/\">mpaulweeks.github.io/avalon</a>\n        </p>\n        <h3>games</h3>\n        {games.map(game => (\n          <div key={game.gid}>\n            {game.gid}\n            {Object.values(game.players).map(p => (\n              <span key={p.pid} onClick={() => FIREBASE.kickPlayer(game, p.pid)}>\n                &nbsp;/ {p.name}\n              </span>\n            ))}\n          </div>\n        ))}\n        <br />\n        <button onClick={() => FIREBASE.deleteAllGames()}> delete all </button>\n      </div>\n    );\n  }\n}\n","// enums\n\nexport type ViewTab = 'loading' | 'lobby' | 'game' | 'nominate' | 'mission' | 'setup' | 'reset' | 'debug';\nexport const ViewTabType = {\n  Loading: 'loading' as ViewTab,\n  Lobby: 'lobby' as ViewTab,\n  Game: 'game' as ViewTab,\n  Nominate: 'nominate' as ViewTab,\n  Mission: 'mission' as ViewTab,\n  Setup: 'setup' as ViewTab,\n  Reset: 'reset' as ViewTab,\n  Debug: 'debug' as ViewTab,\n};\n\nexport type MissionVote = 'success' | 'fail';\nexport const MissionVoteType = {\n  Success: 'success' as MissionVote,\n  Fail: 'fail' as MissionVote,\n};\n\nexport type Nomination = 'approve' | 'reject';\nexport const NominationType = {\n  Approve: 'approve' as Nomination,\n  Reject: 'reject' as Nomination,\n};\n\nexport type MissionResult = 'blue' | 'red' | 'neutral';\nexport const MissionResultType = {\n  Blue: 'blue victory' as MissionResult,\n  Red: 'red victory' as MissionResult,\n  Neutral: 'neutral' as MissionResult,\n};\nexport const MissionResults = Object.values(MissionResultType);\n\nexport const Roles = [\n  'BasicBlue',\n  'Merlin',\n  'Percival',\n  'BasicRed',\n  'Assassin',\n  'Mordred',\n  'Morgana',\n  'Oberon',\n] as const;\nexport type Role = typeof Roles[number];\nexport const RoleType = Roles.reduce((obj, r) => {\n  obj[r] = r;\n  return obj;\n}, {} as { [key in typeof Roles[number]]: Role });\n\n// interfaces\n\nexport interface MissionBlueprint {\n  result: MissionResult;\n  required: number;\n  neededFails: number;\n  roster?: string[] | null;\n}\n\nexport interface BoardData {\n  missions: MissionBlueprint[];\n  vetos: number;\n}\n\nexport interface PlayerData {\n  [key: string]: {\n    pid: string;\n    name: string;\n    role?: Role | null;\n  }\n};\n\nexport interface TurnData {\n  current: string;\n  order: string[];\n};\n\nexport interface NominationData {\n  showResults: boolean;\n  roster: string[];\n  dealerLocked: boolean;\n  tally: {\n    [key: string]: Nomination;\n  };\n};\n\nexport interface MissionData {\n  showResults: boolean;\n  tally: {\n    [key: string]: MissionVote;\n  };\n};\n\nexport interface GameData {\n  gid: string;\n  host?: string;\n  board: BoardData;\n  mission: MissionData;\n  nominations: NominationData;\n  players: PlayerData;\n  roles: Role[];\n  turn: TurnData | null;\n  vetoes: number;\n}\n\nexport interface UserState {\n  v: string;\n  pid: string;\n  name?: string;\n  gid?: string;\n  view: ViewTab;\n}\n","import { Role, Roles, RoleType } from './types';\n\nexport interface RoleData {\n  isRed: boolean;\n  name: string;\n  description: string;\n  sees: Role[];\n};\n\nconst reds = [RoleType.BasicRed, RoleType.Assassin, RoleType.Morgana, RoleType.Mordred, RoleType.Oberon];\nconst redsMinusMordred = reds.filter(r => r !== RoleType.Mordred);\nconst redsMinusOberon = reds.filter(r => r !== RoleType.Oberon);\n\nexport const AllRoles: { [key in typeof Roles[number]]: RoleData } = {\n  BasicBlue: {\n    isRed: false,\n    name: 'Basic Blue',\n    description: 'You know nothing. Good luck!',\n    sees: [],\n  },\n  Merlin: {\n    isRed: false,\n    name: 'Merlin',\n    description: 'Those are the red players.',\n    sees: redsMinusMordred,\n  },\n  Percival: {\n    isRed: false,\n    name: 'Percival',\n    description: 'You see two players. One is your ally Merlin, the other is the enemy Morgana. You must figure out which is which.',\n    sees: [RoleType.Merlin, RoleType.Morgana],\n  },\n  BasicRed: {\n    isRed: true,\n    name: 'Basic Red',\n    description: 'They are your fellow Red players.',\n    sees: redsMinusOberon,\n  },\n  Assassin: {\n    isRed: true,\n    name: 'Assassin',\n    description: 'They are your fellow Red players. You get to guess Merlin at the end of the game.',\n    sees: redsMinusOberon,\n  },\n  Mordred: {\n    isRed: true,\n    name: 'Mordred',\n    description: 'They are your fellow Red players. Merlin cannot see you',\n    sees: redsMinusOberon,\n  },\n  Morgana: {\n    isRed: true,\n    name: 'Morgana',\n    description: 'They are your fellow Red players. Percival sees you and Merlin. Try to confuse them.',\n    sees: redsMinusOberon,\n  },\n  Oberon: {\n    isRed: true,\n    name: 'Oberon',\n    description: 'You cannot see your Red allies.',\n    sees: [],\n  },\n};\n","import styled from 'styled-components';\nimport { MissionResult, MissionResultType } from '../core/types';\n\nexport const Green = styled.span`\n  color: green;\n  font-weight: bold;\n`;\nexport const Red = styled.span`\n  color: red;\n  font-weight: bold;\n`;\n\nexport const StyledBox = styled.div`\n  margin: 1rem 0;\n  padding: 0.8rem;\n  border: 0.2rem solid green;\n`;\n\nexport const HostBox = styled(StyledBox)`\n  border-color: purple;\n  background-color: plum;\n`;\n\nexport const Flex = styled.div`\n  display: flex;\n  flex-direction: horizontal;\n  text-align: center;\n  flex-wrap: nowrap;\n`;\n\nexport const Board = styled(Flex)``;\n\nexport const MissionIcon = styled.div<{ result: MissionResult }>`\n  font-size: 4rem;\n  margin: 0.2em;\n  width: 1.5em;\n  height: 1.5em;\n  border: 1px solid black;\n  border-radius: 2em;\n  cursor: pointer;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  user-select: none;\n\n  ${props => `\n    ${props.result === MissionResultType.Neutral ? `\n      color: black;\n      background-color: white;\n    `: ''}\n    ${props.result === MissionResultType.Blue ? `\n      color: white;\n      background-color: blue;\n    `: ''}\n    ${props.result === MissionResultType.Red ? `\n      color: white;\n      background-color: red;\n    `: ''}\n  `}\n`;\n","import { MissionResultType } from \"./types\";\n\nexport const APP_VERSION = '1.2.6';\n\nexport const isDev = window.location.href.includes('localhost');\nexport const isDebug = window.location.href.includes('#d');\nif (!isDebug) {\n  const orig = console.log;\n  console.log = (...args: any[]) => { };\n  orig('activate debug move to view logs'.toUpperCase());\n}\n\nexport function randomId(length: number) {\n  return Math.floor(Math.random() * Math.pow(10, length)).toString().padStart(length, '0');\n}\n\nexport function sort<T, E>(arr: T[], keyFunc: (key: T) => E) {\n  return arr.concat().sort((a, b) => {\n    const ka = keyFunc(a);\n    const kb = keyFunc(b);\n    if (ka < kb) { return -1; }\n    if (ka > kb) { return 1; }\n    return 0;\n  });\n}\n\nexport function sortObjVals<T, E>(obj: { [key: string]: T }, keyFunc: (key: T) => E) {\n  return sort(Object.values(obj), keyFunc);\n}\n\n/**\n * Randomly shuffle an array\n * https://stackoverflow.com/a/2450976/1293256\n * @param  {Array} array The array to shuffle\n * @return {String}      The first item in the shuffled array\n */\nexport function shuffle<T>(orig: T[]): T[] {\n  const array = orig.concat();\n  var currentIndex = array.length;\n  var temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n};\n\nexport function getBoardFor(count: number) {\n  let missions = [ // === 5\n    { required: 2, neededFails: 1, result: MissionResultType.Neutral },\n    { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n    { required: 2, neededFails: 1, result: MissionResultType.Neutral },\n    { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n    { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n  ];\n  if (count === 6) {\n    missions = [\n      { required: 2, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 4, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 4, neededFails: 1, result: MissionResultType.Neutral },\n    ];\n  }\n  if (count === 7) {\n    missions = [\n      { required: 2, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 4, neededFails: 2, result: MissionResultType.Neutral },\n      { required: 4, neededFails: 1, result: MissionResultType.Neutral },\n    ];\n  }\n  if (count >= 8) {\n    missions = [\n      { required: 3, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 4, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 4, neededFails: 1, result: MissionResultType.Neutral },\n      { required: 5, neededFails: 2, result: MissionResultType.Neutral },\n      { required: 5, neededFails: 1, result: MissionResultType.Neutral },\n    ];\n  }\n  return {\n    vetos: 0,\n    missions: missions,\n  };\n}\n","import React from 'react';\nimport { MissionVoteType, GameData, UserState, RoleType } from '../core/types';\nimport { FIREBASE } from '../core/firebase';\nimport { AllRoles } from '../core/role';\nimport { HostBox, Green, Red } from './shared';\nimport { sortObjVals } from '../core/utils';\n\ninterface Props {\n  isHost: boolean;\n  data: GameData;\n  storage: UserState;\n}\ninterface State { }\n\nexport class ViewMission extends React.Component<Props, State> {\n  pid = this.props.storage.pid;\n  state: State = {};\n\n  getMyRole() {\n    const { storage, data } = this.props;\n    const me = data.players[storage.pid] || {\n      name: storage.name,\n    };\n    return AllRoles[me.role || RoleType.BasicBlue];\n  }\n\n  voteSuccess() {\n    FIREBASE.updateMissionTally(this.props.data.gid, this.pid, MissionVoteType.Success);\n  }\n  voteFail() {\n    FIREBASE.updateMissionTally(this.props.data.gid, this.pid, MissionVoteType.Fail);\n  }\n  voteClear() {\n    const newVotes = { ...this.props.data.mission, };\n    newVotes.tally = {};\n    newVotes.showResults = false;\n    FIREBASE.updateMission(this.props.data.gid, newVotes);\n  }\n  toggleReveal() {\n    const newVotes = { ...this.props.data.mission, };\n    newVotes.showResults = !newVotes.showResults;\n    FIREBASE.updateMission(this.props.data.gid, newVotes);\n  }\n\n  render() {\n    const { isHost, data } = this.props;\n    const { nominations, players, mission } = data;\n    const isNom = nominations.roster.includes(this.pid);\n\n    const sortedPlayers = sortObjVals(players, p => p.pid);\n    const pendingTally = sortedPlayers.filter(p => nominations.roster.includes(p.pid) && !mission.tally[p.pid]);\n\n    return (\n      <div>\n        <h1>Mission Vote</h1>\n\n        {isNom ? (\n          <div>\n            <h3> cast your mission vote </h3>\n            {mission.tally[this.pid] ? (\n              <div> you have voted </div>\n            ) : (\n                <div>\n                  <button onClick={() => this.voteSuccess()}>vote SUCCESS</button>\n                  <button onClick={() => this.voteFail()}>vote FAIL</button>\n                </div>\n              )}\n          </div>\n        ) : (\n            <div>\n              only nominated players can vote during the mission\n            </div>\n          )}\n\n        <h3>results!</h3>\n        {mission.showResults && Object.keys(mission.tally).length ? (\n          <div>\n            {Object.values(mission.tally).sort().reverse().map((vote, i) => (\n              <div key={i}>\n                {vote === MissionVoteType.Success ? (\n                  <Green>{vote.toUpperCase()}</Green>\n                ) : (\n                    <Red>{vote.toUpperCase()}</Red>\n                  )}\n              </div>\n            ))}\n          </div>\n        ) : (\n            <div>\n              {Object.keys(mission.tally).length}/{nominations.roster.length} votes counted\n              {pendingTally.length ? (\n                <div>\n                  <br />\n                  waiting for:\n                  {pendingTally.map(p => (\n                    <div key={p.pid}>{p.name}</div>\n                  ))}\n                </div>\n              ) : ''}\n            </div>\n          )}\n\n        {isHost && (\n          <HostBox>\n            <button onClick={() => this.toggleReveal()}>{mission.showResults ? 'hide' : 'show'} votes</button>\n            <button onClick={() => this.voteClear()}>clear all votes</button>\n          </HostBox>\n        )}\n      </div>\n    );\n  }\n}\n","import { hri } from \"human-readable-ids\";\nimport { UserState, ViewTab, ViewTabType } from \"./types\";\nimport { APP_VERSION } from \"./utils\";\n\nexport interface StorageLayer {\n  getItem(key: string): string | null;\n  setItem(key: string, value: string): void;\n}\n\nclass StorageSingleton {\n  store: StorageLayer = window.localStorage;\n  onSet: (val: UserState) => Promise<void> = () => Promise.resolve();\n\n  private getMinor(v: string) {\n    return (v || '0.0.0').split('.').slice(0, 2).join('.');\n  }\n\n  reset() {\n    this.set({\n      v: APP_VERSION,\n      pid: hri.random(),\n      name: undefined,\n      gid: undefined,\n      view: ViewTabType.Reset,\n    });\n  }\n  private set(data: UserState): Promise<void> {\n    this.store.setItem('state', JSON.stringify(data));\n    return this.onSet(data);\n  }\n  setName(name: string) {\n    return this.set({\n      ...this.get(),\n      name: name,\n    });\n  }\n  setGame(gid: string) {\n    return this.set({\n      ...this.get(),\n      gid: gid,\n    });\n  }\n  setView(view: ViewTab) {\n    return this.set({\n      ...this.get(),\n      view: view,\n    });\n  }\n  get(): UserState {\n    const stored = this.store.getItem('state') || '{}';\n    const data = JSON.parse(stored as any) as UserState;\n    const isValid = data && this.getMinor(data.v) === this.getMinor(APP_VERSION);\n    if (isValid) {\n      return data;\n    }\n    this.reset();\n    return this.get();\n  }\n}\n\nexport const STORAGE = new StorageSingleton();\n","import React from 'react';\nimport { STORAGE } from '../core/storage';\nimport { hri } from 'human-readable-ids';\nimport { isDev } from '../core/utils';\nimport { UserState } from '../core/types';\n\ninterface Props {\n  storage: UserState;\n  createGame(): void;\n  joinGame(id: string): void;\n}\ninterface State {\n  tempName: string;\n  tempJoin: string;\n}\n\nexport class ViewLobby extends React.Component<Props, State> {\n  state: State = {\n    tempName: isDev ? hri.random().split('-')[0] : '',\n    tempJoin: '',\n  };\n\n  setName() {\n    STORAGE.setName(this.state.tempName);\n  }\n\n  render() {\n    const { storage } = this.props;\n    const { tempName, tempJoin } = this.state;\n\n    if (!storage.name) {\n      return (\n        <div>\n          <h1>Enter your name</h1>\n          <input value={tempName} onChange={event => this.setState({ tempName: event.target.value, })} />\n          <button onClick={() => this.setName()}>confirm</button>\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        <h1>Find a Game</h1>\n\n        <div>\n          <button onClick={() => this.props.createGame()}>create new game</button>\n        </div>\n\n        <h3>or</h3>\n\n        <div>\n          <input\n            value={tempJoin}\n            onChange={event => this.setState({ tempJoin: event.target.value, })}\n            placeholder=\"enter game id\"\n          />\n          <br />\n          <br />\n          <button onClick={() => this.props.joinGame(tempJoin)}>join game</button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { UserState } from '../core/types';\n\ninterface Props {\n  storage: UserState,\n  reset(): void;\n}\ninterface State { }\n\nexport class ViewReset extends React.Component<Props, State> {\n  tryReset() {\n    const { gid } = this.props.storage;\n    let confirmed = true;\n    if (gid) {\n      confirmed = window.confirm(\"Are you sure you want to reset?\\nIf you leave a game in progress, you will not be able to rejoin.\");\n    }\n    if (confirmed) {\n      this.props.reset();\n    }\n  }\n  render() {\n    const { storage } = this.props;\n    return (\n      <div>\n        <h1>Current Local State</h1>\n        <pre>\n          {JSON.stringify(storage, null, 2)}\n        </pre>\n        <div>\n          <button onClick={() => this.tryReset()}>Leave game and reset local data</button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { GameData, MissionResults, UserState } from '../core/types';\nimport { FIREBASE } from '../core/firebase';\nimport { HostBox, Board, MissionIcon } from './shared';\n\ninterface Props {\n  data: GameData;\n  isHost: boolean;\n  storage: UserState;\n}\ninterface State { }\n\nexport class ViewGame extends React.Component<Props, State> {\n  nextTurn() {\n    const { gid, turn } = this.props.data;\n    if (!turn) { return; }\n    const currentIndex = turn.order.indexOf(turn.current);\n    const nextIndex = (currentIndex + 1) % turn.order.length;\n    const newCurrent = turn.order[nextIndex];\n    FIREBASE.updateTurn(gid, {\n      ...turn,\n      current: newCurrent,\n    });\n    FIREBASE.clearNominations(gid);\n    FIREBASE.clearMission(gid);\n  }\n  missionChange(mIndex: number) {\n    const { isHost, data } = this.props;\n    if (!isHost) { return; }\n    const { gid, board } = data;\n    const mission = board.missions[mIndex];\n    const currIndex = MissionResults.indexOf(mission.result);\n    const nextIndex = (currIndex + 1) % MissionResults.length;\n    const nextState = MissionResults[nextIndex];\n    mission.result = nextState;\n    FIREBASE.updateBoard(gid, board);\n  }\n\n  setMissionNoms(mIndex: number) {\n    const { isHost, data } = this.props;\n    if (!isHost) { return; }\n    const { gid, board } = data;\n    const mission = board.missions[mIndex];\n    mission.roster = data.nominations.roster;\n    FIREBASE.updateBoard(gid, board);\n  }\n  clearMissionNoms(mIndex: number) {\n    const { isHost, data } = this.props;\n    if (!isHost) { return; }\n    const { gid, board } = data;\n    const mission = board.missions[mIndex];\n    mission.roster = null;\n    FIREBASE.updateBoard(gid, board);\n  }\n  addVeto(delta: number) {\n    const { isHost, data } = this.props;\n    if (!isHost) { return; }\n    const { gid, vetoes } = data;\n    FIREBASE.updateVetoes(gid, vetoes + delta);\n  }\n\n  render() {\n    const { isHost, data } = this.props;\n    const { board, turn, players, vetoes } = data;\n    const anyDoubleFails = board.missions.some(m => m.neededFails > 1);\n\n    return (\n      <div>\n        <h1>Game #{data.gid}</h1>\n        {turn && (\n          <div>\n            {isHost && (\n              <HostBox>\n                <button onClick={() => this.nextTurn()}>\n                  Next Turn\n                </button>\n              </HostBox>\n            )}\n          </div>\n        )}\n\n        <Board>\n          {board.missions.map((m, index) => (\n            <div key={index}>\n              <MissionIcon result={m.result} onClick={() => this.missionChange(index)}>\n                {m.required}\n              </MissionIcon>\n              {anyDoubleFails && (\n                m.neededFails > 1 ? (\n                  <div>\n                    {m.neededFails} fails needed\n                  </div>\n                ) : <br />\n              )}\n              {m.roster && m.roster.map(pid => (\n                <div key={pid}>\n                  {players[pid].name}\n                </div>\n              ))}\n              {isHost && (\n                <HostBox>\n                  {m.roster ? (\n                    <button onClick={() => this.clearMissionNoms(index)}>\n                      remove<br />noms\n                    </button>\n                  ) : (\n                      <button onClick={() => this.setMissionNoms(index)}>\n                        set<br />noms\n                      </button>\n                    )}\n                </HostBox>\n              )}\n            </div>\n          ))}\n        </Board>\n        <div>\n          Missions are played left to right. The number is how many people are required for each mission.\n          <br />\n          It only takes 1 FAIL to win the mission for Red. First team to 3 missions wins.\n        </div>\n\n        <h3>\n          Vetoes: {vetoes}/4\n        </h3>\n        <div>\n          When the number of vetoes reaches 4, the nomination automatically goes to mission without a group vote.\n        </div>\n\n        {isHost && (\n          <HostBox>\n            <button onClick={() => this.addVeto(1)}>+</button>\n            <button onClick={() => this.addVeto(-1)}>-</button>\n          </HostBox>\n        )}\n\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { AllRoles } from '../core/role';\nimport { GameData, Role, Roles, UserState } from '../core/types';\nimport { getBoardFor, shuffle, sortObjVals } from \"../core/utils\";\nimport { FIREBASE } from '../core/firebase';\nimport { HostBox } from './shared';\n\nconst DeleteLink = styled.span`\n  cursor: pointer;\n  text-decoration: underline;\n  color: red;\n`;\n\nconst ErrorMessage = styled.span`\n  color: red;\n`;\n\ninterface Props {\n  isHost: boolean;\n  data: GameData;\n  storage: UserState;\n}\ninterface State {\n  errorMessage?: string;\n}\n\nexport class ViewSetup extends React.Component<Props, State> {\n  state: State = {}\n\n  addRole(role: Role) {\n    const newRoles = [...this.props.data.roles];\n    newRoles.push(role);\n    newRoles.sort();\n    FIREBASE.updateRoles(this.props.data.gid, newRoles);\n  }\n  removeRole(role: Role) {\n    const newRoles = [...this.props.data.roles];\n    const index = newRoles.findIndex(r => r === role);\n    if (index >= 0) {\n      newRoles.splice(index, 1);\n      FIREBASE.updateRoles(this.props.data.gid, newRoles);\n    }\n  }\n  assign() {\n    const { gid, players, roles } = this.props.data;\n    if (Object.keys(players).length !== roles.length) {\n      return this.setState({\n        errorMessage: 'you need the same number of roles as players',\n      });\n    }\n    this.setState({ errorMessage: undefined });\n    const shuffledPlayers = shuffle(Object.keys(players));\n    const shuffledRoles = shuffle(roles);\n    shuffledPlayers.forEach((pid, index) => {\n      players[pid].role = shuffledRoles[index];\n    });\n    FIREBASE.updateBoard(gid, getBoardFor(roles.length));\n    FIREBASE.updatePlayers(gid, players);\n    FIREBASE.updateTurn(gid, {\n      current: shuffledPlayers[0],\n      order: shuffledPlayers,\n    });\n    FIREBASE.clearNominations(gid);\n    FIREBASE.clearMission(gid);\n  }\n  clear() {\n    const { gid, players } = this.props.data;\n    Object.keys(players).forEach((id, index) => {\n      players[id].role = null; // null for Firebase\n    });\n    FIREBASE.updatePlayers(gid, players);\n    FIREBASE.updateTurn(gid, null);\n  }\n\n  renderRoles(roles: Role[], canEdit: boolean) {\n    return (\n      <ul>\n        {roles.map((role, i) => (\n          <li key={i}>\n            {canEdit && <DeleteLink onClick={() => this.removeRole(role)}>X</DeleteLink>}\n            {AllRoles[role].name}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n  renderAdd(roles: Role[]) {\n    return (\n      <div>\n        {roles.map((r, i) => (\n          <button key={i} onClick={() => this.addRole(r)}>\n            {AllRoles[r].name}\n          </button>\n        ))}\n      </div>\n    )\n  }\n  render() {\n    const { isHost, data } = this.props;\n    const { errorMessage } = this.state;\n\n    const isAssigned = Object.values(data.players).some(p => p.role);\n    const canEdit = isHost && !isAssigned;\n\n    const redRoles = Object.values(data.roles).filter(r => AllRoles[r].isRed);\n    const blueRoles = Object.values(data.roles).filter(r => !AllRoles[r].isRed);\n\n    const sortedPlayers = sortObjVals(data.players, p => p.name);\n\n    return (\n      <div>\n        <h1>Setup</h1>\n\n        <h3>\n          Players: {sortedPlayers.length}\n        </h3>\n        <div>\n          {sortedPlayers.map(o => o.name).join(', ')}\n        </div>\n\n        {isHost && (\n          <HostBox>\n            {isAssigned ? (\n              <div>\n                <button onClick={() => this.clear()}>CLEAR ROLES (reset game)</button>\n              </div>\n            ) : (\n                <div>\n                  {this.renderAdd(Roles.filter(r => AllRoles[r].isRed))}\n                  <br />\n                  {this.renderAdd(Roles.filter(r => !AllRoles[r].isRed))}\n                  <br />\n                  <button onClick={() => this.assign()}>ASSIGN ROLES</button>\n                  {errorMessage && (\n                    <ErrorMessage>{errorMessage}</ErrorMessage>\n                  )}\n                </div>\n              )}\n          </HostBox>\n        )}\n\n        <h3>Red Roles ({redRoles.length})</h3>\n        {this.renderRoles(redRoles, canEdit)}\n\n        <h3>Blue Roles ({blueRoles.length})</h3>\n        {this.renderRoles(blueRoles, canEdit)}\n\n        {isHost && (\n          <HostBox>\n            <h3>Kick Player</h3>\n            <p>\n              Mostly an emergency tool if someone resets their info.\n              <br />\n              If the player refreshes without resetting their info, they will rejoin.\n            </p>\n\n            {sortedPlayers.map(p => (\n              <button key={p.pid} onClick={() => FIREBASE.kickPlayer(data, p.pid)}>\n                {p.name}\n              </button>\n            ))}\n          </HostBox>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { CSSProperties } from 'react';\nimport styled from 'styled-components';\nimport { AllRoles } from '../core/role';\nimport { GameData, RoleType, UserState } from '../core/types';\nimport { StyledBox } from './shared';\n\nexport const SecretBox = styled(StyledBox)`\n  background-color: black;\n  color: white;\n  border-color: red;\n`;\n\nexport const RoleBox = styled(StyledBox)`\n  border-color: black;\n  background-color: #eeeeee;\n\n  & span {\n    margin: 0 0.1em;\n  }\n`;\n\nconst ToggleSecrets = styled.div`\n  cursor: pointer;\n`;\n\ninterface Props {\n  storage: UserState;\n  data: GameData;\n}\ninterface State {\n  collapseSecrets: boolean;\n}\n\nexport class ViewBar extends React.Component<Props, State> {\n  state: State = {\n    collapseSecrets: false,\n  };\n\n  render() {\n    const { storage, data } = this.props;\n    const { collapseSecrets } = this.state;\n    const me = data.players[storage.pid] || {\n      name: storage.name,\n    };\n    const myData = AllRoles[me.role || RoleType.BasicBlue];\n    const others = Object.keys(data.players).filter(id => id !== storage.pid).map(key => data.players[key]);\n    const youSee = others.filter(o => o.role && myData.sees.includes(o.role)).map(o => o.name);\n\n    const nominations = data.nominations.roster.length > 0 ? data.nominations.roster.map(pid => data.players[pid].name).join(', ') : '(nobody)';\n    const playerIds = data.turn ? data.turn.order : Object.keys(data.players).sort();\n\n    return (\n      <div>\n        <SecretBox>\n          {collapseSecrets ? (\n            <ToggleSecrets onClick={() => this.setState({ collapseSecrets: false, })}>\n              (click to show secret info)\n            </ToggleSecrets>\n          ) : (\n              <ToggleSecrets onClick={() => this.setState({ collapseSecrets: true, })}>\n                <div>\n                  <u>\n                    SECRET INFO! do not discuss what's in this box! click to hide from nearby players!\n                    </u>\n                </div>\n                {me.role ? (\n                  <div>\n                    you are: <b>{myData.name}</b>. you see: <b>{youSee.join(', ') || '(nobody)'}</b>\n                    <br />\n                    {myData.description}\n                  </div>\n                ) : (\n                    <div>\n                      roles haven't been assigned yet\n                    </div>\n                  )}\n              </ToggleSecrets>\n            )}\n        </SecretBox>\n        <RoleBox>\n          <div>\n            turn order: {playerIds.map((pid, index, array) => {\n            const pdata = data.players[pid];\n            const name = (pdata ? pdata.name : '???') + (index < array.length - 1 ? ',' : '');\n            const style: CSSProperties = {\n              color: pid === data.host ? 'purple' : 'black',\n              textDecoration: (data.turn && pid === data.turn.current) ? 'underline' : 'none',\n            };\n            return (\n              <span key={pid} style={style}>\n                {name}\n              </span>\n            );\n          })}\n          </div>\n          <div>\n            nomination: {nominations}\n          </div>\n        </RoleBox>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { GameData, NominationType, MissionResultType, UserState } from '../core/types';\nimport { FIREBASE } from '../core/firebase';\nimport { HostBox, Green, Red } from './shared';\nimport { sortObjVals } from '../core/utils';\n\ninterface Props {\n  isHost: boolean;\n  data: GameData;\n  storage: UserState;\n}\ninterface State { }\n\nexport class ViewNominate extends React.Component<Props, State> {\n  pid = this.props.storage.pid;\n  state: State = {};\n\n  voteSuccess() {\n    FIREBASE.updateNominationsTally(this.props.data.gid, this.pid, NominationType.Approve);\n  }\n  voteFail() {\n    FIREBASE.updateNominationsTally(this.props.data.gid, this.pid, NominationType.Reject);\n  }\n  voteClear() {\n    const newVotes = { ...this.props.data.nominations, };\n    newVotes.tally = {};\n    newVotes.showResults = false;\n    newVotes.dealerLocked = false;\n    FIREBASE.updateNominations(this.props.data.gid, newVotes);\n  }\n  toggleReveal() {\n    const newVotes = { ...this.props.data.nominations, };\n    newVotes.showResults = !newVotes.showResults;\n    FIREBASE.updateNominations(this.props.data.gid, newVotes);\n  }\n  lockTheNoms() {\n    const isDealer = this.getIsDealer();\n    if (!isDealer) {\n      return alert('only the dealer should be able to lock the nom! error!');\n    }\n    const newVotes = { ...this.props.data.nominations, };\n    newVotes.dealerLocked = true;\n    FIREBASE.updateNominations(this.props.data.gid, newVotes);\n  }\n\n  getIsDealer() {\n    const { data } = this.props;\n    const { nominations } = data;\n    return data.turn && data.turn.current === this.pid && !nominations.showResults;\n  }\n\n  addToRoster(pid: string) {\n    const { nominations } = this.props.data;\n    const newRoster = [...nominations.roster];\n    newRoster.push(pid);\n    newRoster.sort();\n    FIREBASE.updateNominations(this.props.data.gid, {\n      ...nominations,\n      roster: newRoster,\n    });\n  }\n  removeFromRoster(pid: string) {\n    const { nominations } = this.props.data;\n    const newRoster = [...nominations.roster];\n    const index = newRoster.findIndex(p => p === pid);\n    if (index >= 0) {\n      newRoster.splice(index, 1);\n      FIREBASE.updateNominations(this.props.data.gid, {\n        ...nominations,\n        roster: newRoster,\n      });\n    }\n  }\n\n  render() {\n    const { isHost, data } = this.props;\n    const { nominations, players } = data;\n    const isDealer = this.getIsDealer();\n    const sortedPlayers = sortObjVals(players, p => p.pid);\n    const outOfRoster = sortedPlayers.filter(p => !nominations.roster.includes(p.pid));\n    const sortedTally = Object.keys(nominations.tally).sort();\n    const pendingTally = sortedPlayers.filter(p => !nominations.tally[p.pid]);\n\n    const currentMission = data.board.missions.filter(m => m.result === MissionResultType.Neutral)[0];\n    const currentNeeded = currentMission ? currentMission.required : '???';\n\n    return (\n      <div>\n        <h1>Nominate for Mission</h1>\n\n        <div>This mission requires {currentNeeded} people.</div>\n\n        <h3>Nominated:</h3>\n        <div>\n          {nominations.roster.length ? (\n            (isDealer && !nominations.dealerLocked) ? nominations.roster.map((pid, i) => (\n              <button key={i} onClick={() => this.removeFromRoster(pid)}>\n                {players[pid].name}\n              </button>\n            )) : (\n                nominations.roster.map(pid => players[pid].name).join(', ')\n              )\n          ) : (\n              'nobody has been nominated yet'\n            )}\n        </div>\n\n        {isDealer && (\n          nominations.dealerLocked ? (\n            <div>\n              <br />\n              <button onClick={() => this.voteClear()}>Clear votes and change the nomination</button>\n            </div>\n          ) : (\n              <div>\n                <h3>Add to Nomination:</h3>\n                <div>\n                  {outOfRoster.length > 0 ? (\n                    outOfRoster.map((p, i) => (\n                      <button key={i} onClick={() => this.addToRoster(p.pid)}>\n                        {p.name}\n                      </button>\n                    ))\n                  ) : (\n                      'everyone has been nominated'\n                    )}\n                </div>\n              </div>\n            ))}\n\n        {!nominations.dealerLocked ? (\n          <div>\n            <h3>\n              waiting for nomination to be locked in...\n            </h3>\n            {isDealer && (\n              <div>\n                <button onClick={() => this.lockTheNoms()}>Lock and start voting</button>\n              </div>\n            )}\n          </div>\n        ) : (\n            <div>\n              <h3>cast your vote for who goes on the mission</h3>\n\n              {nominations.tally[this.pid] && (\n                <div>\n                  you have voted\n                </div>\n              )}\n              {!nominations.showResults && (\n                <div>\n                  <button onClick={() => this.voteSuccess()}>vote SUPPORT</button>\n                  <button onClick={() => this.voteFail()}>vote REJECT</button>\n                </div>\n              )}\n\n              {isHost && (\n                <HostBox>\n                  <button onClick={() => this.toggleReveal()}>{nominations.showResults ? 'hide' : 'show'} votes</button>\n                  <button onClick={() => this.voteClear()}>clear all votes</button>\n                </HostBox>\n              )}\n\n              <h3>results!</h3>\n\n              {nominations.showResults && Object.keys(nominations.tally).length ? (\n                <div>\n                  {sortedTally.map((pid, i) => (\n                    <div key={i}>\n                      {data.players[pid].name}:&nbsp;\n                      {nominations.tally[pid] === NominationType.Approve ? (\n                        <Green>{nominations.tally[pid].toUpperCase()}</Green>\n                      ) : (\n                          <Red>{nominations.tally[pid].toUpperCase()}</Red>\n                        )}\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                  <div>\n                    {Object.keys(nominations.tally).length}/{Object.keys(players).length} votes counted\n                    {pendingTally.length ? (\n                      <div>\n                        <br />\n                    waiting for:\n                        {pendingTally.map(p => (\n                          <div key={p.pid}>{p.name}</div>\n                        ))}\n                      </div>\n                    ) : ''}\n                  </div>\n                )}\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ViewDebug } from \"./ViewDebug\";\nimport { ViewMission } from \"./ViewMission\";\nimport { ViewLobby } from \"./ViewLobby\";\nimport { ViewReset } from \"./ViewReset\";\nimport { FIREBASE } from \"../core/firebase\";\nimport { GameData, PlayerData, UserState, ViewTabType, ViewTab } from \"../core/types\";\nimport { isDebug, getBoardFor, randomId, APP_VERSION } from \"../core/utils\";\nimport { STORAGE } from \"../core/storage\";\nimport { ViewGame } from \"./ViewGame\";\nimport { ViewSetup } from \"./ViewSetup\";\nimport { ViewBar } from \"./ViewBar\";\nimport { ViewNominate } from \"./ViewNominate\";\nimport { StyledBox } from \"./shared\";\n\nconst HeaderLink = styled(StyledBox) <{ current: boolean, hasLink: boolean }>`\n  margin: 0 0.5em;\n  margin-top: 0;\n  border-color: #00000000;\n  border-top-width: 0;\n  & a {\n    color: inherit;\n  }\n\n  ${props => props.hasLink ? `\n    & span {\n      cursor: pointer;\n      text-decoration: underline;\n    }\n  ` : ''}\n\n  ${props => props.current ? `\n    border-color: grey;\n  ` : ''}\n\n  &:first-child {\n    margin-left: 0;\n  }\n`;\n\ninterface Props { }\ninterface State {\n  storage: UserState;\n  data?: GameData;\n}\n\ninterface LinkProps {\n  type?: ViewTab;\n}\n\nexport class ViewHub extends React.Component<Props, State> {\n  state: State = {\n    storage: STORAGE.get(),\n  };\n  componentDidMount() {\n    STORAGE.onSet = val => new Promise((resolve, reject) => {\n      this.setState({ storage: val }, resolve);\n    });\n    const { storage } = this.state;\n    if (storage.name && storage.gid) {\n      this.join(this.genGuestGameData());\n    } else {\n      STORAGE.setView(ViewTabType.Lobby);\n    }\n  }\n\n  private genHostGameData(): GameData {\n    const { pid } = this.state.storage;\n    return {\n      ...this.genGuestGameData(),\n      host: pid,\n    };\n  }\n  private genGuestGameData(): GameData {\n    const { pid, name, gid } = this.state.storage;\n    if (!gid) {\n      throw new Error('game should be set in localStorage');\n    }\n    return {\n      gid: gid,\n      host: undefined,\n      board: getBoardFor(7),\n      nominations: {\n        showResults: false,\n        dealerLocked: false,\n        roster: [],\n        tally: {},\n      },\n      roles: [],\n      players: {\n        [pid]: {\n          pid: pid,\n          name: name || '???',\n        },\n      },\n      turn: null,\n      vetoes: 0,\n      mission: {\n        showResults: false,\n        tally: {},\n      },\n    };\n  }\n\n  private async join(localData: GameData) {\n    const { storage } = this.state;\n    if (localData.host) {\n      FIREBASE.updateGame(localData);\n    } else {\n      // if joining a game, ensure self and broadcast\n      const hostData = await FIREBASE.getGameData(localData.gid);\n      if (!hostData) {\n        // if no game data for old id, reset\n        this.reset();\n        return;\n      }\n\n      // add self to host.players, but prefer local name\n      const myId = storage.pid;\n      const localMe = localData.players[myId];\n      const remoteMe = hostData.players[myId] || {};\n      const players: PlayerData = {\n        ...hostData.players,\n        [myId]: {\n          ...localMe,\n          ...remoteMe,\n          name: localMe.name,\n        },\n      };\n      FIREBASE.updatePlayers(localData.gid, players);\n    }\n    if (storage.view === ViewTabType.Lobby) {\n      STORAGE.setView(ViewTabType.Game);\n    }\n    FIREBASE.joinGame(localData.gid, data => this.onReceive(data));\n  }\n  private onReceive(data: GameData) {\n    console.log('received:', data);\n    this.setState({\n      data: {\n        roles: [],\n        turn: null,\n        ...data,\n        nominations: {\n          roster: [],\n          tally: {},\n          ...data.nominations,\n        },\n        mission: {\n          tally: {},\n          ...data.mission,\n        },\n      }\n    });\n  }\n\n  async createGame() {\n    await STORAGE.setGame(randomId(3));\n    this.join(this.genHostGameData());\n  }\n  async joinGame(gameId: string) {\n    await STORAGE.setGame(gameId);\n    this.join(this.genGuestGameData());\n  }\n  reset() {\n    const { data, storage } = this.state;\n    if (storage.gid) {\n      FIREBASE.leaveGame(storage.gid);\n    }\n    if (data) {\n      FIREBASE.kickPlayer(data, storage.pid);\n    }\n    this.setState({\n      data: undefined,\n    }, () => STORAGE.reset());\n  }\n\n  renderMain() {\n    const { storage, data } = this.state;\n    const { pid, view } = storage;\n    const isHost = !!data && pid === data.host;\n    if (view === ViewTabType.Game && data) {\n      return <ViewGame isHost={isHost} data={data} storage={storage} />\n    }\n    if (view === ViewTabType.Setup && data) {\n      return <ViewSetup isHost={isHost} data={data} storage={storage} />\n    }\n    if (view === ViewTabType.Nominate && data) {\n      return <ViewNominate isHost={isHost} data={data} storage={storage} />\n    }\n    if (view === ViewTabType.Mission && data) {\n      return <ViewMission isHost={isHost} data={data} storage={storage} />\n    }\n\n    if (view === ViewTabType.Lobby && !data) {\n      return <ViewLobby\n        storage={storage}\n        createGame={() => this.createGame()}\n        joinGame={gid => this.joinGame(gid)}\n      />\n    }\n\n    if (view === ViewTabType.Reset) {\n      return <ViewReset\n        storage={storage}\n        reset={() => this.reset()}\n      />\n    }\n    if (view === ViewTabType.Debug) {\n      return <ViewDebug />\n    }\n\n    if (view === ViewTabType.Loading) {\n      return (\n        <h3>\n          connecting to server, please wait...\n        </h3>\n      );\n    }\n\n    return (\n      <div>\n        <h3>you have reached an invalid state :(</h3>\n        <div>view: {view}</div>\n        <div>data: {!!data}</div>\n        <h3>please try refreshing and/or reset your local state</h3>\n      </div>\n    )\n  }\n\n  Link: React.StatelessComponent<LinkProps> = (props) => {\n    const { type } = props;\n    const onClick = !!type ? () => STORAGE.setView(type) : () => { };\n    return (\n      <HeaderLink\n        current={type === this.state.storage.view}\n        hasLink={!!type}\n        onClick={onClick}\n      >\n        <span>{props.children}</span>\n      </HeaderLink>\n    );\n  }\n\n  render() {\n    const { storage, data } = this.state;\n    return (\n      <div>\n        <nav>\n          <ul>\n            {data && <this.Link type={ViewTabType.Game}>Game #{data.gid}</this.Link>}\n            {data && <this.Link type={ViewTabType.Nominate}>Nominate</this.Link>}\n            {data && <this.Link type={ViewTabType.Mission}>Mission</this.Link>}\n            {data && <this.Link type={ViewTabType.Setup}>Setup</this.Link>}\n            {!data && <this.Link type={ViewTabType.Lobby}>Lobby</this.Link>}\n            <this.Link type={ViewTabType.Reset}>Reset</this.Link>\n            {isDebug && <this.Link type={ViewTabType.Debug}>Debug</this.Link>}\n            <this.Link>\n              <a target=\"_blank\" href=\"rules.pdf\">Rules</a>\n            </this.Link>\n            <this.Link>v.{APP_VERSION}</this.Link>\n          </ul>\n        </nav>\n\n        {data && (\n          <ViewBar data={data} storage={storage} />\n        )}\n\n        {this.renderMain()}\n\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ViewHub } from './fe/ViewHub';\n\nReactDOM.render(\n  <ViewHub />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}